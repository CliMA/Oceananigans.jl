using Oceananigans.Operators: V·∂ú·∂ú·∂ú
using Oceananigans.Fields: ZeroField

@inline _advective_tracer_flux_x(args...) = advective_tracer_flux_x(args...)
@inline _advective_tracer_flux_y(args...) = advective_tracer_flux_y(args...)
@inline _advective_tracer_flux_z(args...) = advective_tracer_flux_z(args...)

@inline div_Uc(i, j, k, grid, advection, ::ZeroU, c) = zero(eltype(grid))
@inline div_Uc(i, j, k, grid, advection, U, ::ZeroField) = zero(eltype(grid))

@inline div_Uc(i, j, k, grid, ::Nothing, U, c) = zero(eltype(grid))
@inline div_Uc(i, j, k, grid, ::Nothing, ::ZeroU, c) = zero(eltype(grid))
@inline div_Uc(i, j, k, grid, ::Nothing, U, ::ZeroField) = zero(eltype(grid))

#####
##### Tracer advection operator
#####

"""
    div_uc(i, j, k, grid, advection, U, c)

Calculate the divergence of the flux of a tracer quantity ``c`` being advected by
a velocity field, ``ùõÅ‚ãÖ(ùêØ c)``,

```
1/V * [Œ¥x·∂ú·µÉ·µÉ(Ax * u * ‚Ñëx·∂†·µÉ·µÉ(c)) + Œ¥y·µÉ·∂ú·µÉ(Ay * v * ‚Ñëy·µÉ·∂†·µÉ(c)) + Œ¥z·µÉ·µÉ·∂ú(Az * w * ‚Ñëz·µÉ·µÉ·∂†(c))]
```
which ends up at the location `ccc`.
"""
@inline function div_Uc(i, j, k, grid, advection, U, c)
    return 1/V·∂ú·∂ú·∂ú(i, j, k, grid) * (Œ¥x·∂ú·µÉ·µÉ(i, j, k, grid, _advective_tracer_flux_x, advection, U.u, c) +
                                    Œ¥y·µÉ·∂ú·µÉ(i, j, k, grid, _advective_tracer_flux_y, advection, U.v, c) +
                                    Œ¥z·µÉ·µÉ·∂ú(i, j, k, grid, _advective_tracer_flux_z, advection, U.w, c))
end
