using Oceananigans.Grids: XFlatGrid, YFlatGrid
using Oceananigans: ‚àÇx_b, ‚àÇy_b, ‚àÇz_b
using Oceananigans.Operators

struct RotatedAdvection{N, FT, U} <: AbstractUpwindBiasedAdvectionScheme{N, FT}
    upwind_scheme :: U
end

RotatedAdvection(upwind_scheme::U) where U = 
    RotatedAdvection{required_halo_size_x(upwind_scheme), eltype(upwind_scheme), U}(upwind_scheme)

@inline rotated_div_Uc(i, j, k, grid, scheme, U, c, buoyancy, tracers) = div_Uc(i, j, k, grid, scheme, U, c)

@inline function rotated_div_Uc(i, j, k, grid, scheme::RotatedAdvection, U, c, buoyancy, tracers)
    
    upwind_scheme = scheme.upwind_scheme
    centered_scheme_x = x_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_y = y_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_z = z_advection(upwind_scheme).advecting_velocity_scheme

    ùíúx‚Å∫ = _advective_tracer_flux_x(i+1, j,   k,   grid, upwind_scheme, U.u, c)
    ùíúx‚Åª = _advective_tracer_flux_x(i,   j,   k,   grid, upwind_scheme, U.u, c)
    ùíúy‚Å∫ = _advective_tracer_flux_y(i,   j+1, k,   grid, upwind_scheme, U.v, c)
    ùíúy‚Åª = _advective_tracer_flux_y(i,   j,   k,   grid, upwind_scheme, U.v, c)
    ùíúz‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, upwind_scheme, U.w, c)
    ùíúz‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, upwind_scheme, U.w, c)

    ùíûx‚Å∫ = _advective_tracer_flux_x(i+1, j,   k,   grid, centered_scheme_x, U.u, c)
    ùíûx‚Åª = _advective_tracer_flux_x(i,   j,   k,   grid, centered_scheme_x, U.u, c)
    ùíûy‚Å∫ = _advective_tracer_flux_y(i,   j+1, k,   grid, centered_scheme_y, U.v, c)
    ùíûy‚Åª = _advective_tracer_flux_y(i,   j,   k,   grid, centered_scheme_y, U.v, c)
    ùíûz‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, centered_scheme_z, U.w, c)
    ùíûz‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, centered_scheme_z, U.w, c)

    ùíüx‚Å∫ = ùíúx‚Å∫ - ùíûx‚Å∫
    ùíüx‚Åª = ùíúx‚Åª - ùíûx‚Åª
    ùíüy‚Å∫ = ùíúy‚Å∫ - ùíûy‚Å∫
    ùíüy‚Åª = ùíúy‚Åª - ùíûy‚Åª
    ùíüz‚Å∫ = ùíúz‚Å∫ - ùíûz‚Å∫
    ùíüz‚Åª = ùíúz‚Åª - ùíûz‚Åª

    œµ = Œîz·∂ú·∂ú·∂ú(i, j, k, grid)^2 / max(Œîx·∂ú·∂ú·∂ú(i, j, k, grid), Œîy·∂ú·∂ú·∂ú(i, j, k, grid))^2

    R‚ÇÅ‚ÇÅ‚Å∫, R‚ÇÅ‚ÇÇ‚Å∫, R‚ÇÅ‚ÇÉ‚Å∫ = rotation_tensor·∂†·∂ú·∂ú(i+1, j, k, grid, buoyancy, tracers, œµ)
    R‚ÇÅ‚ÇÅ‚Åª, R‚ÇÅ‚ÇÇ‚Åª, R‚ÇÅ‚ÇÉ‚Åª = rotation_tensor·∂†·∂ú·∂ú(i,   j, k, grid, buoyancy, tracers, œµ)

    R‚ÇÇ‚ÇÅ‚Å∫, R‚ÇÇ‚ÇÇ‚Å∫, R‚ÇÇ‚ÇÉ‚Å∫ = rotation_tensor·∂ú·∂†·∂ú(i, j+1, k, grid, buoyancy, tracers, œµ)
    R‚ÇÇ‚ÇÅ‚Åª, R‚ÇÇ‚ÇÇ‚Åª, R‚ÇÇ‚ÇÉ‚Åª = rotation_tensor·∂ú·∂†·∂ú(i, j,   k, grid, buoyancy, tracers, œµ)
    
    R‚ÇÉ‚ÇÅ‚Å∫, R‚ÇÉ‚ÇÇ‚Å∫, R‚ÇÉ‚ÇÉ‚Å∫ = rotation_tensor·∂ú·∂ú·∂†(i, j, k+1, grid, buoyancy, tracers, œµ)
    R‚ÇÉ‚ÇÅ‚Åª, R‚ÇÉ‚ÇÇ‚Åª, R‚ÇÉ‚ÇÉ‚Åª = rotation_tensor·∂ú·∂ú·∂†(i, j, k,   grid, buoyancy, tracers, œµ)

    Fx‚Å∫ = ùíûx‚Å∫ + R‚ÇÅ‚ÇÅ‚Å∫ * ùíüx‚Å∫ + R‚ÇÅ‚ÇÇ‚Å∫ * ùíüy‚Å∫ + R‚ÇÅ‚ÇÉ‚Å∫ * ùíüz‚Å∫
    Fy‚Å∫ = ùíûy‚Å∫ + R‚ÇÇ‚ÇÅ‚Å∫ * ùíüx‚Å∫ + R‚ÇÇ‚ÇÇ‚Å∫ * ùíüy‚Å∫ + R‚ÇÇ‚ÇÉ‚Å∫ * ùíüz‚Å∫
    Fz‚Å∫ = ùíûz‚Å∫ + R‚ÇÉ‚ÇÅ‚Å∫ * ùíüx‚Å∫ + R‚ÇÉ‚ÇÇ‚Å∫ * ùíüy‚Å∫ + R‚ÇÉ‚ÇÉ‚Å∫ * ùíüz‚Å∫

    Fx‚Åª = ùíûx‚Åª + R‚ÇÅ‚ÇÅ‚Åª * ùíüx‚Åª + R‚ÇÅ‚ÇÇ‚Åª * ùíüy‚Åª + R‚ÇÅ‚ÇÉ‚Åª * ùíüz‚Åª
    Fy‚Åª = ùíûy‚Åª + R‚ÇÇ‚ÇÅ‚Åª * ùíüx‚Åª + R‚ÇÇ‚ÇÇ‚Åª * ùíüy‚Åª + R‚ÇÇ‚ÇÉ‚Åª * ùíüz‚Åª
    Fz‚Åª = ùíûz‚Åª + R‚ÇÉ‚ÇÅ‚Åª * ùíüx‚Åª + R‚ÇÉ‚ÇÇ‚Åª * ùíüy‚Åª + R‚ÇÉ‚ÇÉ‚Åª * ùíüz‚Åª

    return 1 / V·∂ú·∂ú·∂ú(i, j, k, grid) * (Fx‚Å∫ - Fx‚Åª + Fy‚Å∫ - Fy‚Åª + Fz‚Å∫ - Fz‚Åª)
end

@inline function rotation_tensor·∂†·∂ú·∂ú(i, j, k, grid, buoyancy, tracers, œµ)
    bx =   ‚àÇx_b(i, j, k, grid,       buoyancy, tracers) 
    by = ‚Ñëxy·∂ú·∂†·µÉ(i, j, k, grid, ‚àÇy_b, buoyancy, tracers) 
    bz = ‚Ñëxz·∂ú·µÉ·∂†(i, j, k, grid, ‚àÇz_b, buoyancy, tracers) 
    S  = bx^2 + by^2 + bz^2
    Sx = abs(bx / bz)
    Sy = abs(by / bz)
    cond = (Sx < 10000) & (Sy < 10000) & (S > 0) # Tapering

    R‚ÇÅ‚ÇÅ = ifelse(cond,   (by^2 + bz^2 + œµ * bx^2) / S, one(grid)) 
    R‚ÇÅ‚ÇÇ = ifelse(cond,        ((œµ - 1) * bx * by) / S, zero(grid)) 
    R‚ÇÅ‚ÇÉ = ifelse(cond,        ((œµ - 1) * bx * bz) / S, zero(grid))

    return R‚ÇÅ‚ÇÅ, R‚ÇÅ‚ÇÇ, R‚ÇÅ‚ÇÉ
end

@inline function rotation_tensor·∂ú·∂†·∂ú(i, j, k, grid, buoyancy, tracers, œµ)
    bx = ‚Ñëxy·∂ú·∂†·µÉ(i, j, k, grid, ‚àÇx_b, buoyancy, tracers) 
    by =   ‚àÇy_b(i, j, k, grid,       buoyancy, tracers) 
    bz = ‚Ñëyz·µÉ·∂ú·∂†(i, j, k, grid, ‚àÇz_b, buoyancy, tracers) 
    S  = bx^2 + by^2 + bz^2
    Sx = abs(bx / bz)
    Sy = abs(by / bz)
    cond = (Sx < 10000) & (Sy < 10000) & (S > 0) # Tapering

    R‚ÇÇ‚ÇÅ = ifelse(cond,      ((œµ - 1) * by * bx) / S, zero(grid)) 
    R‚ÇÇ‚ÇÇ = ifelse(cond, (bx^2 + bz^2 + œµ * by^2) / S, one(grid)) 
    R‚ÇÇ‚ÇÉ = ifelse(cond,      ((œµ - 1) * by * bz) / S, zero(grid))

    return R‚ÇÇ‚ÇÅ, R‚ÇÇ‚ÇÇ, R‚ÇÇ‚ÇÉ
end

@inline function rotation_tensor·∂ú·∂ú·∂†(i, j, k, grid, buoyancy, tracers, œµ)
    bx = ‚Ñëxz·∂ú·µÉ·∂†(i, j, k, grid, ‚àÇx_b, buoyancy, tracers) 
    by = ‚Ñëyz·µÉ·∂ú·∂†(i, j, k, grid, ‚àÇy_b, buoyancy, tracers) 
    bz =   ‚àÇz_b(i, j, k, grid,       buoyancy, tracers) 
    S  = bx^2 + by^2 + bz^2
    Sx = abs(bx / bz)
    Sy = abs(by / bz)
    cond = (Sx < 10000) & (Sy < 10000) & (S > 0) # Tapering

    R‚ÇÉ‚ÇÅ = ifelse(cond,      ((œµ - 1) * bz * bx) / S, zero(grid)) 
    R‚ÇÉ‚ÇÇ = ifelse(cond,      ((œµ - 1) * bz * by) / S, zero(grid))
    R‚ÇÉ‚ÇÉ = ifelse(cond, (bx^2 + by^2 + œµ * bz^2) / S, one(grid)) 

    return R‚ÇÉ‚ÇÅ, R‚ÇÉ‚ÇÇ, R‚ÇÉ‚ÇÉ
end
