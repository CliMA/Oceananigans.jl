using Oceananigans.Grids: XFlatGrid, YFlatGrid
using Oceananigans: ‚àÇx_b, ‚àÇy_b, ‚àÇz_b
using Oceananigans.Operators

struct RotatedAdvection{N, FT, U} <: AbstractUpwindBiasedAdvectionScheme{N, FT}
    upwind_scheme :: U
    rotation_percentage :: FT
    maximum_slope :: FT
    percentage_of_diapycnal_flux :: FT
end

function RotatedAdvection(upwind_scheme::U;
                          maximum_slope = 1e5, 
                          rotation_percentage = 1.0,
                          percentage_of_diapycnal_flux = 1e-7) where U 

    FT = eltype(upwind_scheme)
    
    N  = max(required_halo_size_x(upwind_scheme),
             required_halo_size_y(upwind_scheme),
             required_halo_size_z(upwind_scheme))
    
    rotation_percentage = convert(FT, rotation_percentage)
    maximum_slope = convert(FT, maximum_slope)
    percentage_of_diapycnal_flux = convert(FT, percentage_of_diapycnal_flux)

    return RotatedAdvection{N, FT, U}(upwind_scheme, rotation_percentage, maximum_slope, percentage_of_diapycnal_flux)
end

# Fallback, we cannot rotate the fluxes if we do not at least have two active tracers!
@inline rotated_div_Uc(i, j, k, grid, scheme, U, c, buoyancy, tracers) = div_Uc(i, j, k, grid, scheme, U, c)

@inline function rotated_div_Uc(i, j, k, grid, scheme::RotatedAdvection, U, c, buoyancy, tracers)
    
    upwind_scheme = scheme.upwind_scheme
    centered_scheme_x = x_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_y = y_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_z = z_advection(upwind_scheme).advecting_velocity_scheme

    # Total advective fluxes
    ùíúx·∂†·∂ú·∂ú‚Å∫ = _advective_tracer_flux_x(i+1, j, k, grid, upwind_scheme, U.u, c)
    ùíúx·∂†·∂ú·∂ú‚Åª = _advective_tracer_flux_x(i,   j, k, grid, upwind_scheme, U.u, c)
    ùíûx·∂†·∂ú·∂ú‚Å∫ = _advective_tracer_flux_x(i+1, j, k, grid, centered_scheme_x, U.u, c)
    ùíûx·∂†·∂ú·∂ú‚Åª = _advective_tracer_flux_x(i,   j, k, grid, centered_scheme_x, U.u, c)

    ùíúx·∂ú·∂†·∂ú‚Å∫ = ‚Ñëxy·∂ú·∂†·µÉ(i+1, j, k, grid, _advective_tracer_flux_x, upwind_scheme, U.u, c)
    ùíúx·∂ú·∂†·∂ú‚Åª = ‚Ñëxy·∂ú·∂†·µÉ(i,   j, k, grid, _advective_tracer_flux_x, upwind_scheme, U.u, c)
    ùíúx·∂ú·∂ú·∂†‚Å∫ = ‚Ñëxz·∂ú·µÉ·∂†(i+1, j, k, grid, _advective_tracer_flux_x, upwind_scheme, U.u, c)
    ùíúx·∂ú·∂ú·∂†‚Åª = ‚Ñëxz·∂ú·µÉ·∂†(i,   j, k, grid, _advective_tracer_flux_x, upwind_scheme, U.u, c)

    ùíûx·∂ú·∂†·∂ú‚Å∫ = ‚Ñëxy·∂ú·∂†·µÉ(i+1, j, k, grid, _advective_tracer_flux_x, centered_scheme_x, U.u, c)
    ùíûx·∂ú·∂†·∂ú‚Åª = ‚Ñëxy·∂ú·∂†·µÉ(i,   j, k, grid, _advective_tracer_flux_x, centered_scheme_x, U.u, c)
    ùíûx·∂ú·∂ú·∂†‚Å∫ = ‚Ñëxz·∂ú·µÉ·∂†(i+1, j, k, grid, _advective_tracer_flux_x, centered_scheme_x, U.u, c)
    ùíûx·∂ú·∂ú·∂†‚Åª = ‚Ñëxz·∂ú·µÉ·∂†(i,   j, k, grid, _advective_tracer_flux_x, centered_scheme_x, U.u, c)

    ùíúy·∂ú·∂†·∂ú‚Å∫ = _advective_tracer_flux_y(i, j+1, k, grid, upwind_scheme, U.v, c)
    ùíúy·∂ú·∂†·∂ú‚Åª = _advective_tracer_flux_y(i, j,   k, grid, upwind_scheme, U.v, c)
    ùíûy·∂ú·∂†·∂ú‚Å∫ = _advective_tracer_flux_y(i, j+1, k, grid, centered_scheme_y, U.v, c)
    ùíûy·∂ú·∂†·∂ú‚Åª = _advective_tracer_flux_y(i, j,   k, grid, centered_scheme_y, U.v, c)

    ùíúy·∂†·∂ú·∂ú‚Å∫ = ‚Ñëxy·∂†·∂ú·µÉ(i, j+1, k, grid, _advective_tracer_flux_y, upwind_scheme, U.v, c)
    ùíúy·∂†·∂ú·∂ú‚Åª = ‚Ñëxy·∂†·∂ú·µÉ(i, j,   k, grid, _advective_tracer_flux_y, upwind_scheme, U.v, c)
    ùíúy·∂ú·∂ú·∂†‚Å∫ = ‚Ñëyz·µÉ·∂ú·∂†(i, j+1, k, grid, _advective_tracer_flux_y, upwind_scheme, U.v, c)
    ùíúy·∂ú·∂ú·∂†‚Åª = ‚Ñëyz·µÉ·∂ú·∂†(i, j,   k, grid, _advective_tracer_flux_y, upwind_scheme, U.v, c)

    ùíûy·∂†·∂ú·∂ú‚Å∫ = ‚Ñëxy·∂†·∂ú·µÉ(i, j+1, k, grid, _advective_tracer_flux_y, centered_scheme_y, U.v, c)
    ùíûy·∂†·∂ú·∂ú‚Åª = ‚Ñëxy·∂†·∂ú·µÉ(i, j,   k, grid, _advective_tracer_flux_y, centered_scheme_y, U.v, c)
    ùíûy·∂ú·∂ú·∂†‚Å∫ = ‚Ñëyz·µÉ·∂ú·∂†(i, j+1, k, grid, _advective_tracer_flux_y, centered_scheme_y, U.v, c)
    ùíûy·∂ú·∂ú·∂†‚Åª = ‚Ñëyz·µÉ·∂ú·∂†(i, j,   k, grid, _advective_tracer_flux_y, centered_scheme_y, U.v, c)

    ùíúz·∂ú·∂ú·∂†‚Å∫ = _advective_tracer_flux_z(i, j, k+1, grid, upwind_scheme, U.w, c)
    ùíúz·∂ú·∂ú·∂†‚Åª = _advective_tracer_flux_z(i, j, k,   grid, upwind_scheme, U.w, c)
    ùíûz·∂ú·∂ú·∂†‚Å∫ = _advective_tracer_flux_z(i, j, k+1, grid, centered_scheme_z, U.w, c)
    ùíûz·∂ú·∂ú·∂†‚Åª = _advective_tracer_flux_z(i, j, k,   grid, centered_scheme_z, U.w, c)

    ùíúz·∂†·∂ú·∂ú‚Å∫ = ‚Ñëxz·∂†·µÉ·∂ú(i, j, k+1, grid, _advective_tracer_flux_z, upwind_scheme, U.w, c)
    ùíúz·∂†·∂ú·∂ú‚Åª = ‚Ñëxz·∂†·µÉ·∂ú(i, j, k,   grid, _advective_tracer_flux_z, upwind_scheme, U.w, c)
    ùíúz·∂ú·∂†·∂ú‚Å∫ = ‚Ñëyz·µÉ·∂†·∂ú(i, j, k+1, grid, _advective_tracer_flux_z, upwind_scheme, U.w, c)
    ùíúz·∂ú·∂†·∂ú‚Åª = ‚Ñëyz·µÉ·∂†·∂ú(i, j, k,   grid, _advective_tracer_flux_z, upwind_scheme, U.w, c)

    ùíûz·∂†·∂ú·∂ú‚Å∫ = ‚Ñëxz·∂†·µÉ·∂ú(i, j, k+1, grid, _advective_tracer_flux_z, centered_scheme_z, U.w, c)
    ùíûz·∂†·∂ú·∂ú‚Åª = ‚Ñëxz·∂†·µÉ·∂ú(i, j, k,   grid, _advective_tracer_flux_z, centered_scheme_z, U.w, c)
    ùíûz·∂ú·∂†·∂ú‚Å∫ = ‚Ñëyz·µÉ·∂†·∂ú(i, j, k+1, grid, _advective_tracer_flux_z, centered_scheme_z, U.w, c)
    ùíûz·∂ú·∂†·∂ú‚Åª = ‚Ñëyz·µÉ·∂†·∂ú(i, j, k,   grid, _advective_tracer_flux_z, centered_scheme_z, U.w, c)

    ùíüx·∂†·∂ú·∂ú‚Å∫ = ùíúx·∂†·∂ú·∂ú‚Å∫ - ùíûx·∂†·∂ú·∂ú‚Å∫
    ùíüx·∂†·∂ú·∂ú‚Åª = ùíúx·∂†·∂ú·∂ú‚Åª - ùíûx·∂†·∂ú·∂ú‚Åª
    ùíüx·∂ú·∂†·∂ú‚Å∫ = ùíúx·∂ú·∂†·∂ú‚Å∫ - ùíûx·∂ú·∂†·∂ú‚Å∫
    ùíüx·∂ú·∂†·∂ú‚Åª = ùíúx·∂ú·∂†·∂ú‚Åª - ùíûx·∂ú·∂†·∂ú‚Åª
    ùíüx·∂ú·∂ú·∂†‚Å∫ = ùíúx·∂ú·∂ú·∂†‚Å∫ - ùíûx·∂ú·∂ú·∂†‚Å∫
    ùíüx·∂ú·∂ú·∂†‚Åª = ùíúx·∂ú·∂ú·∂†‚Åª - ùíûx·∂ú·∂ú·∂†‚Åª

    ùíüy·∂†·∂ú·∂ú‚Å∫ = ùíúy·∂†·∂ú·∂ú‚Å∫ - ùíûy·∂†·∂ú·∂ú‚Å∫
    ùíüy·∂†·∂ú·∂ú‚Åª = ùíúy·∂†·∂ú·∂ú‚Åª - ùíûy·∂†·∂ú·∂ú‚Åª
    ùíüy·∂ú·∂†·∂ú‚Å∫ = ùíúy·∂ú·∂†·∂ú‚Å∫ - ùíûy·∂ú·∂†·∂ú‚Å∫
    ùíüy·∂ú·∂†·∂ú‚Åª = ùíúy·∂ú·∂†·∂ú‚Åª - ùíûy·∂ú·∂†·∂ú‚Åª
    ùíüy·∂ú·∂ú·∂†‚Å∫ = ùíúy·∂ú·∂ú·∂†‚Å∫ - ùíûy·∂ú·∂ú·∂†‚Å∫
    ùíüy·∂ú·∂ú·∂†‚Åª = ùíúy·∂ú·∂ú·∂†‚Åª - ùíûy·∂ú·∂ú·∂†‚Åª

    ùíüz·∂†·∂ú·∂ú‚Å∫ = ùíúz·∂†·∂ú·∂ú‚Å∫ - ùíûz·∂†·∂ú·∂ú‚Å∫
    ùíüz·∂†·∂ú·∂ú‚Åª = ùíúz·∂†·∂ú·∂ú‚Åª - ùíûz·∂†·∂ú·∂ú‚Åª
    ùíüz·∂ú·∂†·∂ú‚Å∫ = ùíúz·∂ú·∂†·∂ú‚Å∫ - ùíûz·∂ú·∂†·∂ú‚Å∫
    ùíüz·∂ú·∂†·∂ú‚Åª = ùíúz·∂ú·∂†·∂ú‚Åª - ùíûz·∂ú·∂†·∂ú‚Åª
    ùíüz·∂ú·∂ú·∂†‚Å∫ = ùíúz·∂ú·∂ú·∂†‚Å∫ - ùíûz·∂ú·∂ú·∂†‚Å∫
    ùíüz·∂ú·∂ú·∂†‚Åª = ùíúz·∂ú·∂ú·∂†‚Åª - ùíûz·∂ú·∂ú·∂†‚Åª

    # TODO: make this a parameter?
    œµ = scheme.percentage_of_diapycnal_flux
    Smax = scheme.maximum_slope

    # Elements of the rotation tensor
    R‚ÇÅ‚ÇÅ‚Å∫, R‚ÇÅ‚ÇÇ‚Å∫, R‚ÇÅ‚ÇÉ‚Å∫ = rotation_tensor·∂†·∂ú·∂ú(i+1, j, k, grid, buoyancy, tracers, Smax, œµ)
    R‚ÇÅ‚ÇÅ‚Åª, R‚ÇÅ‚ÇÇ‚Åª, R‚ÇÅ‚ÇÉ‚Åª = rotation_tensor·∂†·∂ú·∂ú(i,   j, k, grid, buoyancy, tracers, Smax, œµ)

    R‚ÇÇ‚ÇÅ‚Å∫, R‚ÇÇ‚ÇÇ‚Å∫, R‚ÇÇ‚ÇÉ‚Å∫ = rotation_tensor·∂ú·∂†·∂ú(i, j+1, k, grid, buoyancy, tracers, Smax, œµ)
    R‚ÇÇ‚ÇÅ‚Åª, R‚ÇÇ‚ÇÇ‚Åª, R‚ÇÇ‚ÇÉ‚Åª = rotation_tensor·∂ú·∂†·∂ú(i, j,   k, grid, buoyancy, tracers, Smax, œµ)
    
    R‚ÇÉ‚ÇÅ‚Å∫, R‚ÇÉ‚ÇÇ‚Å∫, R‚ÇÉ‚ÇÉ‚Å∫ = rotation_tensor·∂ú·∂ú·∂†(i, j, k+1, grid, buoyancy, tracers, Smax, œµ)
    R‚ÇÉ‚ÇÅ‚Åª, R‚ÇÉ‚ÇÇ‚Åª, R‚ÇÉ‚ÇÉ‚Åª = rotation_tensor·∂ú·∂ú·∂†(i, j, k,   grid, buoyancy, tracers, Smax, œµ)

    # Renormalize the rotated fluxes based on the Œ±
    ‚Ñõx‚Å∫ = R‚ÇÅ‚ÇÅ‚Å∫ * ùíüx·∂†·∂ú·∂ú‚Å∫ + R‚ÇÅ‚ÇÇ‚Å∫ * ùíüy·∂†·∂ú·∂ú‚Å∫ + R‚ÇÅ‚ÇÉ‚Å∫ * ùíüz·∂†·∂ú·∂ú‚Å∫
    ‚Ñõx‚Åª = R‚ÇÅ‚ÇÅ‚Åª * ùíüx·∂†·∂ú·∂ú‚Åª + R‚ÇÅ‚ÇÇ‚Åª * ùíüy·∂†·∂ú·∂ú‚Åª + R‚ÇÅ‚ÇÉ‚Åª * ùíüz·∂†·∂ú·∂ú‚Åª
    ‚Ñõy‚Å∫ = R‚ÇÇ‚ÇÅ‚Å∫ * ùíüx·∂ú·∂†·∂ú‚Å∫ + R‚ÇÇ‚ÇÇ‚Å∫ * ùíüy·∂ú·∂†·∂ú‚Å∫ + R‚ÇÇ‚ÇÉ‚Å∫ * ùíüz·∂ú·∂†·∂ú‚Å∫
    ‚Ñõy‚Åª = R‚ÇÇ‚ÇÅ‚Åª * ùíüx·∂ú·∂†·∂ú‚Åª + R‚ÇÇ‚ÇÇ‚Åª * ùíüy·∂ú·∂†·∂ú‚Åª + R‚ÇÇ‚ÇÉ‚Åª * ùíüz·∂ú·∂†·∂ú‚Åª
    ‚Ñõz‚Å∫ = R‚ÇÉ‚ÇÅ‚Å∫ * ùíüx·∂ú·∂ú·∂†‚Å∫ + R‚ÇÉ‚ÇÇ‚Å∫ * ùíüy·∂ú·∂ú·∂†‚Å∫ + R‚ÇÉ‚ÇÉ‚Å∫ * ùíüz·∂ú·∂ú·∂†‚Å∫
    ‚Ñõz‚Åª = R‚ÇÉ‚ÇÅ‚Åª * ùíüx·∂ú·∂ú·∂†‚Åª + R‚ÇÉ‚ÇÇ‚Åª * ùíüy·∂ú·∂ú·∂†‚Åª + R‚ÇÉ‚ÇÉ‚Åª * ùíüz·∂ú·∂ú·∂†‚Åª

    Œ± = scheme.rotation_percentage

    # Fluxes
    Fx‚Å∫ = ùíûx·∂†·∂ú·∂ú‚Å∫ + Œ± + ‚Ñõx‚Å∫ + (1 - Œ±) * ùíüx·∂†·∂ú·∂ú‚Å∫
    Fx‚Åª = ùíûx·∂†·∂ú·∂ú‚Åª + Œ± + ‚Ñõx‚Åª + (1 - Œ±) * ùíüx·∂†·∂ú·∂ú‚Åª
    Fy‚Å∫ = ùíûy·∂ú·∂†·∂ú‚Å∫ + Œ± + ‚Ñõz‚Å∫ + (1 - Œ±) * ùíüx·∂ú·∂†·∂ú‚Å∫
    Fy‚Åª = ùíûy·∂ú·∂†·∂ú‚Åª + Œ± + ‚Ñõz‚Åª + (1 - Œ±) * ùíüx·∂ú·∂†·∂ú‚Åª
    Fz‚Å∫ = ùíûz·∂ú·∂ú·∂†‚Å∫ + Œ± + ‚Ñõz‚Å∫ + (1 - Œ±) * ùíüx·∂ú·∂ú·∂†‚Å∫
    Fz‚Åª = ùíûz·∂ú·∂ú·∂†‚Åª + Œ± + ‚Ñõz‚Åª + (1 - Œ±) * ùíüx·∂ú·∂ú·∂†‚Åª
        
    return 1 / V·∂ú·∂ú·∂ú(i, j, k, grid) * (Fx‚Å∫ - Fx‚Åª + Fy‚Å∫ - Fy‚Åª + Fz‚Å∫ - Fz‚Åª)
end

@inline function rotation_tensor·∂†·∂ú·∂ú(i, j, k, grid, buoyancy, tracers, Smax, œµ)
    bx =   ‚àÇx_b(i, j, k, grid,       buoyancy, tracers) 
    by = ‚Ñëxy·∂ú·∂†·µÉ(i, j, k, grid, ‚àÇy_b, buoyancy, tracers) 
    bz = ‚Ñëxz·∂ú·µÉ·∂†(i, j, k, grid, ‚àÇz_b, buoyancy, tracers) 
    S  = bx^2 + by^2 + bz^2
    Sx = abs(bx / bz)
    Sy = abs(by / bz)
    condition = (Sx < Smax) & (Sy < Smax) & (S > 0) # Tapering

    R‚ÇÅ‚ÇÅ = ifelse(condition,   (by^2 + bz^2 + œµ * bx^2) / S, one(grid)) 
    R‚ÇÅ‚ÇÇ = ifelse(condition,        ((œµ - 1) * bx * by) / S, zero(grid)) 
    R‚ÇÅ‚ÇÉ = ifelse(condition,        ((œµ - 1) * bx * bz) / S, zero(grid))

    return R‚ÇÅ‚ÇÅ, R‚ÇÅ‚ÇÇ, R‚ÇÅ‚ÇÉ
end

@inline function rotation_tensor·∂ú·∂†·∂ú(i, j, k, grid, buoyancy, tracers, Smax, œµ)
    bx = ‚Ñëxy·∂ú·∂†·µÉ(i, j, k, grid, ‚àÇx_b, buoyancy, tracers) 
    by =   ‚àÇy_b(i, j, k, grid,       buoyancy, tracers) 
    bz = ‚Ñëyz·µÉ·∂ú·∂†(i, j, k, grid, ‚àÇz_b, buoyancy, tracers) 
    S  = bx^2 + by^2 + bz^2
    Sx = abs(bx / bz)
    Sy = abs(by / bz)
    condition = (Sx < Smax) & (Sy < Smax) & (S > 0) # Tapering

    R‚ÇÇ‚ÇÅ = ifelse(condition,      ((œµ - 1) * by * bx) / S, zero(grid)) 
    R‚ÇÇ‚ÇÇ = ifelse(condition, (bx^2 + bz^2 + œµ * by^2) / S, one(grid)) 
    R‚ÇÇ‚ÇÉ = ifelse(condition,      ((œµ - 1) * by * bz) / S, zero(grid))

    return R‚ÇÇ‚ÇÅ, R‚ÇÇ‚ÇÇ, R‚ÇÇ‚ÇÉ
end

@inline function rotation_tensor·∂ú·∂ú·∂†(i, j, k, grid, buoyancy, tracers, Smax, œµ)
    bx = ‚Ñëxz·∂ú·µÉ·∂†(i, j, k, grid, ‚àÇx_b, buoyancy, tracers) 
    by = ‚Ñëyz·µÉ·∂ú·∂†(i, j, k, grid, ‚àÇy_b, buoyancy, tracers) 
    bz =   ‚àÇz_b(i, j, k, grid,       buoyancy, tracers) 
    S  = bx^2 + by^2 + bz^2
    Sx = abs(bx / bz)
    Sy = abs(by / bz)
    condition = (Sx < Smax) & (Sy < Smax) & (S > 0) # Tapering

    R‚ÇÉ‚ÇÅ = ifelse(condition,      ((œµ - 1) * bz * bx) / S, zero(grid)) 
    R‚ÇÉ‚ÇÇ = ifelse(condition,      ((œµ - 1) * bz * by) / S, zero(grid))
    R‚ÇÉ‚ÇÉ = ifelse(condition, (bx^2 + by^2 + œµ * bz^2) / S, one(grid)) 

    return R‚ÇÉ‚ÇÅ, R‚ÇÉ‚ÇÇ, R‚ÇÉ‚ÇÉ
end