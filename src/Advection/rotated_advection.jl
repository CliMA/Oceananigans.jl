using Oceananigans.Grids: XFlatGrid, YFlatGrid
using Oceananigans: ‚àÇx_b, ‚àÇy_b, ‚àÇz_b
using Oceananigans.Operators

struct RotatedAdvection{N, FT, U} <: AbstractUpwindBiasedAdvectionScheme{N, FT}
    upwind_scheme :: U
    minimum_rotation_percentage :: FT
    maximum_slope :: FT
end

function RotatedAdvection(upwind_scheme::U;
                          maximum_slope = 1e5, 
                          minimum_rotation_percentage = 0.1) where U 

    FT = eltype(upwind_scheme)
    
    N  = max(required_halo_size_x(upwind_scheme),
             required_halo_size_y(upwind_scheme),
             required_halo_size_z(upwind_scheme))
    
    minimum_rotation_percentage = convert(FT, minimum_rotation_percentage)
    maximum_slope = convert(FT, maximum_slope)

    return RotatedAdvection{N, FT, U}(upwind_scheme, minimum_rotation_percentage, maximum_slope)
end

@inline rotated_div_Uc(i, j, k, grid, scheme, U, c, buoyancy, tracers) = div_Uc(i, j, k, grid, scheme, U, c)

@inline function rotated_div_Uc(i, j, k, grid, scheme::RotatedAdvection, U, c, buoyancy, tracers)
    
    upwind_scheme = scheme.upwind_scheme
    centered_scheme_x = x_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_y = y_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_z = z_advection(upwind_scheme).advecting_velocity_scheme

    # Total advective fluxes
    ùíúx‚Å∫ = _advective_tracer_flux_x(i+1, j,   k,   grid, upwind_scheme, U.u, c)
    ùíúx‚Åª = _advective_tracer_flux_x(i,   j,   k,   grid, upwind_scheme, U.u, c)
    ùíúy‚Å∫ = _advective_tracer_flux_y(i,   j+1, k,   grid, upwind_scheme, U.v, c)
    ùíúy‚Åª = _advective_tracer_flux_y(i,   j,   k,   grid, upwind_scheme, U.v, c)
    ùíúz‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, upwind_scheme, U.w, c)
    ùíúz‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, upwind_scheme, U.w, c)

    # Centered advective fluxes
    ùíûx‚Å∫ = _advective_tracer_flux_x(i+1, j,   k,   grid, centered_scheme_x, U.u, c)
    ùíûx‚Åª = _advective_tracer_flux_x(i,   j,   k,   grid, centered_scheme_x, U.u, c)
    ùíûy‚Å∫ = _advective_tracer_flux_y(i,   j+1, k,   grid, centered_scheme_y, U.v, c)
    ùíûy‚Åª = _advective_tracer_flux_y(i,   j,   k,   grid, centered_scheme_y, U.v, c)
    ùíûz‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, centered_scheme_z, U.w, c)
    ùíûz‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, centered_scheme_z, U.w, c)

    # Diffusive fluxes
    ùíüx‚Å∫ = ùíúx‚Å∫ - ùíûx‚Å∫
    ùíüx‚Åª = ùíúx‚Åª - ùíûx‚Åª
    ùíüy‚Å∫ = ùíúy‚Å∫ - ùíûy‚Å∫
    ùíüy‚Åª = ùíúy‚Åª - ùíûy‚Åª
    ùíüz‚Å∫ = ùíúz‚Å∫ - ùíûz‚Å∫
    ùíüz‚Åª = ùíúz‚Åª - ùíûz‚Åª

    # TODO: make this a parameter?
    œµ = Œîz·∂ú·∂ú·∂ú(i, j, k, grid)^2 / max(Œîx·∂ú·∂ú·∂ú(i, j, k, grid), Œîy·∂ú·∂ú·∂ú(i, j, k, grid))^2
    Smax = scheme.maximum_slope

    # Elements of the rotation tensor
    R‚ÇÅ‚ÇÅ‚Å∫, R‚ÇÅ‚ÇÇ‚Å∫, R‚ÇÅ‚ÇÉ‚Å∫ = rotation_tensor·∂†·∂ú·∂ú(i+1, j, k, grid, buoyancy, tracers, Smax, œµ)
    R‚ÇÅ‚ÇÅ‚Åª, R‚ÇÅ‚ÇÇ‚Åª, R‚ÇÅ‚ÇÉ‚Åª = rotation_tensor·∂†·∂ú·∂ú(i,   j, k, grid, buoyancy, tracers, Smax, œµ)

    R‚ÇÇ‚ÇÅ‚Å∫, R‚ÇÇ‚ÇÇ‚Å∫, R‚ÇÇ‚ÇÉ‚Å∫ = rotation_tensor·∂ú·∂†·∂ú(i, j+1, k, grid, buoyancy, tracers, Smax, œµ)
    R‚ÇÇ‚ÇÅ‚Åª, R‚ÇÇ‚ÇÇ‚Åª, R‚ÇÇ‚ÇÉ‚Åª = rotation_tensor·∂ú·∂†·∂ú(i, j,   k, grid, buoyancy, tracers, Smax, œµ)
    
    R‚ÇÉ‚ÇÅ‚Å∫, R‚ÇÉ‚ÇÇ‚Å∫, R‚ÇÉ‚ÇÉ‚Å∫ = rotation_tensor·∂ú·∂ú·∂†(i, j, k+1, grid, buoyancy, tracers, Smax, œµ)
    R‚ÇÉ‚ÇÅ‚Åª, R‚ÇÉ‚ÇÇ‚Åª, R‚ÇÉ‚ÇÉ‚Åª = rotation_tensor·∂ú·∂ú·∂†(i, j, k,   grid, buoyancy, tracers, Smax, œµ)

    # Rotated fluxes
    ‚Ñõx‚Å∫ = R‚ÇÅ‚ÇÅ‚Å∫ * ùíüx‚Å∫ + R‚ÇÅ‚ÇÇ‚Å∫ * ùíüy‚Å∫ + R‚ÇÅ‚ÇÉ‚Å∫ * ùíüz‚Å∫
    ‚Ñõx‚Åª = R‚ÇÅ‚ÇÅ‚Åª * ùíüx‚Åª + R‚ÇÅ‚ÇÇ‚Åª * ùíüy‚Åª + R‚ÇÅ‚ÇÉ‚Åª * ùíüz‚Åª

    ‚Ñõy‚Å∫ = R‚ÇÇ‚ÇÅ‚Å∫ * ùíüx‚Å∫ + R‚ÇÇ‚ÇÇ‚Å∫ * ùíüy‚Å∫ + R‚ÇÇ‚ÇÉ‚Å∫ * ùíüz‚Å∫
    ‚Ñõy‚Åª = R‚ÇÇ‚ÇÅ‚Åª * ùíüx‚Åª + R‚ÇÇ‚ÇÇ‚Åª * ùíüy‚Åª + R‚ÇÇ‚ÇÉ‚Åª * ùíüz‚Åª

    ‚Ñõz‚Å∫ = R‚ÇÉ‚ÇÅ‚Å∫ * ùíüx‚Å∫ + R‚ÇÉ‚ÇÇ‚Å∫ * ùíüy‚Å∫ + R‚ÇÉ‚ÇÉ‚Å∫ * ùíüz‚Å∫
    ‚Ñõz‚Åª = R‚ÇÉ‚ÇÅ‚Åª * ùíüx‚Åª + R‚ÇÉ‚ÇÇ‚Åª * ùíüy‚Åª + R‚ÇÉ‚ÇÉ‚Åª * ùíüz‚Åª

    # Limiting the scheme to a minimum rotation
    Œ± = scheme.minimum_rotation_percentage
    Œ±x‚Å∫ = min(Œ±, abs(‚Ñõx‚Å∫) / abs(ùíüx‚Å∫))
    Œ±x‚Åª = min(Œ±, abs(‚Ñõx‚Åª) / abs(ùíüx‚Åª))
        
    Œ±y‚Å∫ = min(Œ±, abs(‚Ñõy‚Å∫) / abs(ùíüy‚Å∫))
    Œ±y‚Åª = min(Œ±, abs(‚Ñõy‚Åª) / abs(ùíüy‚Åª))
       
    Œ±z‚Å∫ = min(Œ±, abs(‚Ñõz‚Å∫) / abs(ùíüz‚Å∫))
    Œ±z‚Åª = min(Œ±, abs(‚Ñõz‚Åª) / abs(ùíüz‚Åª))


    Fx‚Å∫ = ùíûx‚Å∫ + Œ±x‚Å∫ * ‚Ñõx‚Å∫ + (1 - Œ±x‚Å∫) * ùíüx‚Å∫
    Fx‚Åª = ùíûx‚Åª + Œ±x‚Åª * ‚Ñõx‚Åª + (1 - Œ±x‚Åª) * ùíüx‚Åª
                                            
    Fy‚Åª = ùíûy‚Åª + Œ±y‚Å∫ * ‚Ñõy‚Åª + (1 - Œ±y‚Å∫) * ùíüy‚Åª
    Fy‚Å∫ = ùíûy‚Å∫ + Œ±y‚Åª * ‚Ñõy‚Å∫ + (1 - Œ±y‚Åª) * ùíüy‚Å∫
                                             
    Fz‚Å∫ = ùíûz‚Å∫ + Œ±z‚Å∫ * ‚Ñõz‚Å∫ + (1 - Œ±z‚Å∫) * ùíüz‚Å∫
    Fz‚Åª = ùíûz‚Åª + Œ±z‚Åª * ‚Ñõz‚Åª + (1 - Œ±z‚Åª) * ùíüz‚Åª

    return 1 / V·∂ú·∂ú·∂ú(i, j, k, grid) * (Fx‚Å∫ - Fx‚Åª + Fy‚Å∫ - Fy‚Åª + Fz‚Å∫ - Fz‚Åª)
end

@inline function rotation_tensor·∂†·∂ú·∂ú(i, j, k, grid, buoyancy, tracers, Smax, œµ)
    bx =   ‚àÇx_b(i, j, k, grid,       buoyancy, tracers) 
    by = ‚Ñëxy·∂ú·∂†·µÉ(i, j, k, grid, ‚àÇy_b, buoyancy, tracers) 
    bz = ‚Ñëxz·∂ú·µÉ·∂†(i, j, k, grid, ‚àÇz_b, buoyancy, tracers) 
    S  = bx^2 + by^2 + bz^2
    Sx = abs(bx / bz)
    Sy = abs(by / bz)
    condition = (Sx < Smax) & (Sy < Smax) & (S > 0) # Tapering

    R‚ÇÅ‚ÇÅ = ifelse(condition,   (by^2 + bz^2 + œµ * bx^2) / S, one(grid)) 
    R‚ÇÅ‚ÇÇ = ifelse(condition,        ((œµ - 1) * bx * by) / S, zero(grid)) 
    R‚ÇÅ‚ÇÉ = ifelse(condition,        ((œµ - 1) * bx * bz) / S, zero(grid))

    return R‚ÇÅ‚ÇÅ, R‚ÇÅ‚ÇÇ, R‚ÇÅ‚ÇÉ
end

@inline function rotation_tensor·∂ú·∂†·∂ú(i, j, k, grid, buoyancy, tracers, Smax, œµ)
    bx = ‚Ñëxy·∂ú·∂†·µÉ(i, j, k, grid, ‚àÇx_b, buoyancy, tracers) 
    by =   ‚àÇy_b(i, j, k, grid,       buoyancy, tracers) 
    bz = ‚Ñëyz·µÉ·∂ú·∂†(i, j, k, grid, ‚àÇz_b, buoyancy, tracers) 
    S  = bx^2 + by^2 + bz^2
    Sx = abs(bx / bz)
    Sy = abs(by / bz)
    condition = (Sx < Smax) & (Sy < Smax) & (S > 0) # Tapering

    R‚ÇÇ‚ÇÅ = ifelse(condition,      ((œµ - 1) * by * bx) / S, zero(grid)) 
    R‚ÇÇ‚ÇÇ = ifelse(condition, (bx^2 + bz^2 + œµ * by^2) / S, one(grid)) 
    R‚ÇÇ‚ÇÉ = ifelse(condition,      ((œµ - 1) * by * bz) / S, zero(grid))

    return R‚ÇÇ‚ÇÅ, R‚ÇÇ‚ÇÇ, R‚ÇÇ‚ÇÉ
end

@inline function rotation_tensor·∂ú·∂ú·∂†(i, j, k, grid, buoyancy, tracers, Smax, œµ)
    bx = ‚Ñëxz·∂ú·µÉ·∂†(i, j, k, grid, ‚àÇx_b, buoyancy, tracers) 
    by = ‚Ñëyz·µÉ·∂ú·∂†(i, j, k, grid, ‚àÇy_b, buoyancy, tracers) 
    bz =   ‚àÇz_b(i, j, k, grid,       buoyancy, tracers) 
    S  = bx^2 + by^2 + bz^2
    Sx = abs(bx / bz)
    Sy = abs(by / bz)
    condition = (Sx < Smax) & (Sy < Smax) & (S > 0) # Tapering

    R‚ÇÉ‚ÇÅ = ifelse(condition,      ((œµ - 1) * bz * bx) / S, zero(grid)) 
    R‚ÇÉ‚ÇÇ = ifelse(condition,      ((œµ - 1) * bz * by) / S, zero(grid))
    R‚ÇÉ‚ÇÉ = ifelse(condition, (bx^2 + by^2 + œµ * bz^2) / S, one(grid)) 

    return R‚ÇÉ‚ÇÅ, R‚ÇÉ‚ÇÇ, R‚ÇÉ‚ÇÉ
end
