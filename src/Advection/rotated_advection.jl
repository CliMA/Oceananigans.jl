using Oceananigans.Grids: XFlatGrid, YFlatGrid
using Oceananigans: ‚àÇx_b, ‚àÇy_b, ‚àÇz_b
using Oceananigans.Operators

struct RotatedAdvection{N, FT, U} <: AbstractUpwindBiasedAdvectionScheme{N, FT}
    upwind_scheme :: U
    rotation_percentage :: FT
    maximum_slope :: FT
    percentage_of_diapycnal_flux :: FT
end

function RotatedAdvection(upwind_scheme::U;
                          maximum_slope = 1e5, 
                          rotation_percentage = 1.0,
                          percentage_of_diapycnal_flux = 1e-7) where U 

    FT = eltype(upwind_scheme)
    
    N  = max(required_halo_size_x(upwind_scheme),
             required_halo_size_y(upwind_scheme),
             required_halo_size_z(upwind_scheme))
    
    rotation_percentage = convert(FT, rotation_percentage)
    maximum_slope = convert(FT, maximum_slope)
    percentage_of_diapycnal_flux = convert(FT, percentage_of_diapycnal_flux)

    return RotatedAdvection{N, FT, U}(upwind_scheme, rotation_percentage, maximum_slope, percentage_of_diapycnal_flux)
end

# Fallback, we cannot rotate the fluxes if we do not at least have two active tracers!
@inline rotated_div_Uc(i, j, k, grid, scheme, U, c, buoyancy, tracers) = div_Uc(i, j, k, grid, scheme, U, c)
@inline rotated_div_Uc(i, j, k, grid, scheme::RotatedAdvection, U, c, buoyancy, tracers) = div_Uc(i, j, k, grid, scheme.upwind_scheme, U, c)

@inline function rotated_div_Uc(i, j, k, grid, scheme::RotatedAdvection, U, c, buoyancy::SeawaterBuoyancy, tracers)
    
    upwind_scheme = scheme.upwind_scheme
    centered_scheme_x = x_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_y = y_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_z = z_advection(upwind_scheme).advecting_velocity_scheme

    # Total advective fluxes
    ùíúx‚ÇÄ‚Å∫ = _advective_tracer_flux_x(i+1, j,   k-1, grid, upwind_scheme, U.u, c)
    ùíúx‚ÇÄ‚Åª = _advective_tracer_flux_x(i,   j,   k-1, grid, upwind_scheme, U.u, c)
    ùíúx‚ÇÅ‚Å∫ = _advective_tracer_flux_x(i+1, j,   k  , grid, upwind_scheme, U.u, c)
    ùíúx‚ÇÅ‚Åª = _advective_tracer_flux_x(i,   j,   k  , grid, upwind_scheme, U.u, c)
    ùíúx‚ÇÇ‚Å∫ = _advective_tracer_flux_x(i+1, j,   k+1, grid, upwind_scheme, U.u, c)
    ùíúx‚ÇÇ‚Åª = _advective_tracer_flux_x(i,   j,   k+1, grid, upwind_scheme, U.u, c)

    ùíúy‚ÇÄ‚Å∫ = _advective_tracer_flux_y(i,   j+1, k-1, grid, upwind_scheme, U.v, c)
    ùíúy‚ÇÄ‚Åª = _advective_tracer_flux_y(i,   j,   k-1, grid, upwind_scheme, U.v, c)
    ùíúy‚ÇÅ‚Å∫ = _advective_tracer_flux_y(i,   j+1, k,   grid, upwind_scheme, U.v, c)
    ùíúy‚ÇÅ‚Åª = _advective_tracer_flux_y(i,   j,   k,   grid, upwind_scheme, U.v, c)
    ùíúy‚ÇÇ‚Å∫ = _advective_tracer_flux_y(i,   j+1, k+1, grid, upwind_scheme, U.v, c)
    ùíúy‚ÇÇ‚Åª = _advective_tracer_flux_y(i,   j,   k+1, grid, upwind_scheme, U.v, c)
    
    ùíúzÀ£‚ÇÄ‚Å∫ = _advective_tracer_flux_z(i-1, j,   k+1, grid, upwind_scheme, U.w, c)
    ùíúzÀ£‚ÇÄ‚Åª = _advective_tracer_flux_z(i-1, j,   k,   grid, upwind_scheme, U.w, c)
    ùíúzÀ£‚ÇÅ‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, upwind_scheme, U.w, c)
    ùíúzÀ£‚ÇÅ‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, upwind_scheme, U.w, c)
    ùíúzÀ£‚ÇÅ‚Å∫ = _advective_tracer_flux_z(i+1, j,   k+1, grid, upwind_scheme, U.w, c)
    ùíúzÀ£‚ÇÅ‚Åª = _advective_tracer_flux_z(i+1, j,   k,   grid, upwind_scheme, U.w, c)
    ùíúz ∏‚ÇÄ‚Å∫ = _advective_tracer_flux_z(i,   j+1, k+1, grid, upwind_scheme, U.w, c)
    ùíúz ∏‚ÇÄ‚Åª = _advective_tracer_flux_z(i,   j+1, k,   grid, upwind_scheme, U.w, c)
    ùíúz ∏‚ÇÅ‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, upwind_scheme, U.w, c)
    ùíúz ∏‚ÇÅ‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, upwind_scheme, U.w, c)
    ùíúz ∏‚ÇÅ‚Å∫ = _advective_tracer_flux_z(i,   j-1, k+1, grid, upwind_scheme, U.w, c)
    ùíúz ∏‚ÇÅ‚Åª = _advective_tracer_flux_z(i,   j-1, k,   grid, upwind_scheme, U.w, c)

    # Centered advective fluxes
    ùíûx‚ÇÄ‚Å∫ = _advective_tracer_flux_x(i+1, j,   k-1, grid, centered_scheme_x, U.u, c)
    ùíûx‚ÇÄ‚Åª = _advective_tracer_flux_x(i,   j,   k-1, grid, centered_scheme_x, U.u, c)
    ùíûx‚ÇÅ‚Å∫ = _advective_tracer_flux_x(i+1, j,   k  , grid, centered_scheme_x, U.u, c)
    ùíûx‚ÇÅ‚Åª = _advective_tracer_flux_x(i,   j,   k  , grid, centered_scheme_x, U.u, c)
    ùíûx‚ÇÇ‚Å∫ = _advective_tracer_flux_x(i+1, j,   k+1, grid, centered_scheme_x, U.u, c)
    ùíûx‚ÇÇ‚Åª = _advective_tracer_flux_x(i,   j,   k+1, grid, centered_scheme_x, U.u, c)

    ùíûy‚ÇÄ‚Å∫ = _advective_tracer_flux_y(i,   j+1, k-1, grid, centered_scheme_y, U.v, c)
    ùíûy‚ÇÄ‚Åª = _advective_tracer_flux_y(i,   j,   k-1, grid, centered_scheme_y, U.v, c)
    ùíûy‚ÇÅ‚Å∫ = _advective_tracer_flux_y(i,   j+1, k,   grid, centered_scheme_y, U.v, c)
    ùíûy‚ÇÅ‚Åª = _advective_tracer_flux_y(i,   j,   k,   grid, centered_scheme_y, U.v, c)
    ùíûy‚ÇÇ‚Å∫ = _advective_tracer_flux_y(i,   j+1, k+1, grid, centered_scheme_y, U.v, c)
    ùíûy‚ÇÇ‚Åª = _advective_tracer_flux_y(i,   j,   k+1, grid, centered_scheme_y, U.v, c) 
     
    ùíûzÀ£‚ÇÄ‚Å∫ = _advective_tracer_flux_z(i-1, j,   k+1, grid, centered_scheme_z, U.w, c)
    ùíûzÀ£‚ÇÄ‚Åª = _advective_tracer_flux_z(i-1, j,   k,   grid, centered_scheme_z, U.w, c)
    ùíûzÀ£‚ÇÅ‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, centered_scheme_z, U.w, c)
    ùíûzÀ£‚ÇÅ‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, centered_scheme_z, U.w, c)
    ùíûzÀ£‚ÇÇ‚Å∫ = _advective_tracer_flux_z(i+1, j,   k+1, grid, centered_scheme_z, U.w, c)
    ùíûzÀ£‚ÇÇ‚Åª = _advective_tracer_flux_z(i+1, j,   k,   grid, centered_scheme_z, U.w, c)
    ùíûz ∏‚ÇÄ‚Å∫ = _advective_tracer_flux_z(i,   j-1, k+1, grid, centered_scheme_z, U.w, c)
    ùíûz ∏‚ÇÄ‚Åª = _advective_tracer_flux_z(i,   j-1, k,   grid, centered_scheme_z, U.w, c)
    ùíûz ∏‚ÇÅ‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, centered_scheme_z, U.w, c)
    ùíûz ∏‚ÇÅ‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, centered_scheme_z, U.w, c)
    ùíûz ∏‚ÇÇ‚Å∫ = _advective_tracer_flux_z(i,   j+1, k+1, grid, centered_scheme_z, U.w, c)
    ùíûz ∏‚ÇÇ‚Åª = _advective_tracer_flux_z(i,   j+1, k,   grid, centered_scheme_z, U.w, c)

    # Diffusive fluxes for the whole triad
    Dx‚ÇÄ‚Å∫ = ùíúx‚ÇÄ‚Å∫ - ùíûx‚ÇÄ‚Å∫ # @ fcc ->  i+1, j, k-1
    Dx‚ÇÄ‚Åª = ùíúx‚ÇÄ‚Åª - ùíûx‚ÇÄ‚Åª # @ fcc ->  i,   j, k-1
    Dx‚ÇÅ‚Å∫ = ùíúx‚ÇÅ‚Å∫ - ùíûx‚ÇÅ‚Å∫ # @ fcc ->  i+1, j, k
    Dx‚ÇÅ‚Åª = ùíúx‚ÇÅ‚Åª - ùíûx‚ÇÅ‚Åª # @ fcc ->  i,   j, k
    Dx‚ÇÇ‚Å∫ = ùíúx‚ÇÇ‚Å∫ - ùíûx‚ÇÇ‚Å∫ # @ fcc ->  i+1, j, k+1
    Dx‚ÇÇ‚Åª = ùíúx‚ÇÇ‚Åª - ùíûx‚ÇÇ‚Åª # @ fcc ->  i,   j, k+1

    Dy‚ÇÄ‚Å∫ = ùíúy‚ÇÄ‚Å∫ - ùíûy‚ÇÄ‚Å∫ # @ cfc ->  i, j+1, k-1
    Dy‚ÇÄ‚Åª = ùíúy‚ÇÄ‚Åª - ùíûy‚ÇÄ‚Åª # @ cfc ->  i, j,   k-1
    Dy‚ÇÅ‚Å∫ = ùíúy‚ÇÅ‚Å∫ - ùíûy‚ÇÅ‚Å∫ # @ cfc ->  i, j+1, k
    Dy‚ÇÅ‚Åª = ùíúy‚ÇÅ‚Åª - ùíûy‚ÇÅ‚Åª # @ cfc ->  i, j,   k
    Dy‚ÇÇ‚Å∫ = ùíúy‚ÇÇ‚Å∫ - ùíûy‚ÇÇ‚Å∫ # @ cfc ->  i, j+1, k+1
    Dy‚ÇÇ‚Åª = ùíúy‚ÇÇ‚Åª - ùíûy‚ÇÇ‚Åª # @ cfc ->  i, j,   k+1
    
    DzÀ£‚ÇÄ‚Å∫ = ùíúzÀ£‚ÇÄ‚Å∫ - ùíûzÀ£‚ÇÄ‚Å∫ # @ ccf ->  i-1, j, k+1
    DzÀ£‚ÇÄ‚Åª = ùíúzÀ£‚ÇÄ‚Åª - ùíûzÀ£‚ÇÄ‚Åª # @ ccf ->  i-1, j, k
    DzÀ£‚ÇÅ‚Å∫ = ùíúzÀ£‚ÇÅ‚Å∫ - ùíûzÀ£‚ÇÅ‚Å∫ # @ ccf ->  i,   j, k+1
    DzÀ£‚ÇÅ‚Åª = ùíúzÀ£‚ÇÅ‚Åª - ùíûzÀ£‚ÇÅ‚Åª # @ ccf ->  i,   j, k
    DzÀ£‚ÇÇ‚Å∫ = ùíúzÀ£‚ÇÇ‚Å∫ - ùíûzÀ£‚ÇÇ‚Å∫ # @ ccf ->  i+1, j, k+1
    DzÀ£‚ÇÇ‚Åª = ùíúzÀ£‚ÇÇ‚Åª - ùíûzÀ£‚ÇÇ‚Åª # @ ccf ->  i+1, j, k
    Dz ∏‚ÇÄ‚Å∫ = ùíúz ∏‚ÇÄ‚Å∫ - ùíûz ∏‚ÇÄ‚Å∫ # @ ccf ->  i, j-1, k+1
    Dz ∏‚ÇÄ‚Åª = ùíúz ∏‚ÇÄ‚Åª - ùíûz ∏‚ÇÄ‚Åª # @ ccf ->  i, j-1, k
    Dz ∏‚ÇÅ‚Å∫ = ùíúz ∏‚ÇÅ‚Å∫ - ùíûz ∏‚ÇÅ‚Å∫ # @ ccf ->  i, j,   k+1
    Dz ∏‚ÇÅ‚Åª = ùíúz ∏‚ÇÅ‚Åª - ùíûz ∏‚ÇÅ‚Åª # @ ccf ->  i, j,   k
    Dz ∏‚ÇÇ‚Å∫ = ùíúz ∏‚ÇÅ‚Å∫ - ùíûz ∏‚ÇÅ‚Å∫ # @ ccf ->  i, j+1, k+1
    Dz ∏‚ÇÇ‚Åª = ùíúz ∏‚ÇÅ‚Åª - ùíûz ∏‚ÇÅ‚Åª # @ ccf ->  i, j+1, k

    # TODO: make this a parameter?
    œµ = scheme.percentage_of_diapycnal_flux
    Smax = scheme.maximum_slope

    # Start with the triads!!
    bx‚ÇÄ‚Å∫ = ‚àÇx_b(i+1, j, k-1, grid, buoyancy, tracers)
    bx‚ÇÄ‚Åª = ‚àÇx_b(i,   j, k-1, grid, buoyancy, tracers)
    bx‚ÇÅ‚Å∫ = ‚àÇx_b(i+1, j, k  , grid, buoyancy, tracers)
    bx‚ÇÅ‚Åª = ‚àÇx_b(i,   j, k  , grid, buoyancy, tracers)
    bx‚ÇÇ‚Å∫ = ‚àÇx_b(i+1, j, k+1, grid, buoyancy, tracers)
    bx‚ÇÇ‚Åª = ‚àÇx_b(i,   j, k+1, grid, buoyancy, tracers)

    by‚ÇÄ‚Å∫ = ‚àÇy_b(i, j+1, k-1, grid, buoyancy, tracers)
    by‚ÇÄ‚Åª = ‚àÇy_b(i, j,   k-1, grid, buoyancy, tracers)
    by‚ÇÅ‚Å∫ = ‚àÇy_b(i, j+1, k  , grid, buoyancy, tracers)
    by‚ÇÅ‚Åª = ‚àÇy_b(i, j,   k  , grid, buoyancy, tracers)
    by‚ÇÇ‚Å∫ = ‚àÇy_b(i, j+1, k+1, grid, buoyancy, tracers)
    by‚ÇÇ‚Åª = ‚àÇy_b(i, j,   k+1, grid, buoyancy, tracers)
    
    bzÀ£‚ÇÄ‚Å∫ = ‚àÇz_b(i-1, j,   k+1, grid, buoyancy, tracers)
    bzÀ£‚ÇÄ‚Åª = ‚àÇz_b(i-1, j,   k,   grid, buoyancy, tracers)
    bzÀ£‚ÇÅ‚Å∫ = ‚àÇz_b(i,   j,   k+1, grid, buoyancy, tracers)
    bzÀ£‚ÇÅ‚Åª = ‚àÇz_b(i,   j,   k,   grid, buoyancy, tracers)
    bzÀ£‚ÇÇ‚Å∫ = ‚àÇz_b(i+1, j,   k+1, grid, buoyancy, tracers)
    bzÀ£‚ÇÇ‚Åª = ‚àÇz_b(i+1, j,   k,   grid, buoyancy, tracers)
    bz ∏‚ÇÄ‚Å∫ = ‚àÇz_b(i,   j-1, k+1, grid, buoyancy, tracers)
    bz ∏‚ÇÄ‚Åª = ‚àÇz_b(i,   j-1, k,   grid, buoyancy, tracers)
    bz ∏‚ÇÅ‚Å∫ = ‚àÇz_b(i,   j,   k+1, grid, buoyancy, tracers)
    bz ∏‚ÇÅ‚Åª = ‚àÇz_b(i,   j,   k,   grid, buoyancy, tracers)
    bz ∏‚ÇÇ‚Å∫ = ‚àÇz_b(i,   j+1, k+1, grid, buoyancy, tracers)
    bz ∏‚ÇÇ‚Åª = ‚àÇz_b(i,   j+1, k,   grid, buoyancy, tracers)
    
    # Small slope approximation, let's try?
    ‚Ñõx‚Å∫ = 1 / 4Œîz·∂ú·∂ú·∂ú(i, j, k, grid) * (
        Œîz·∂ú·∂ú·∂†(i, j, k,   grid) * (2Dx‚ÇÅ‚Å∫ + bx‚ÇÅ‚Å∫ / bzÀ£‚ÇÇ‚Åª * DzÀ£‚ÇÇ‚Åª + bx‚ÇÅ‚Å∫ / bzÀ£‚ÇÇ‚Å∫ * DzÀ£‚ÇÇ‚Å∫) +
        Œîz·∂ú·∂ú·∂†(i, j, k+1, grid) * (2Dx‚ÇÅ‚Å∫ + bx‚ÇÅ‚Å∫ / bzÀ£‚ÇÅ‚Åª * DzÀ£‚ÇÅ‚Åª + bx‚ÇÅ‚Å∫ / bzÀ£‚ÇÅ‚Å∫ * DzÀ£‚ÇÅ‚Å∫)
    )

    ‚Ñõx‚Åª = 1 / 4Œîz·∂ú·∂ú·∂ú(i-1, j, k, grid) * (
        Œîz·∂ú·∂ú·∂†(i-1, j, k,   grid) * (2Dx‚ÇÅ‚Åª + bx‚ÇÅ‚Åª / bzÀ£‚ÇÅ‚Åª * DzÀ£‚ÇÅ‚Åª + bx‚ÇÅ‚Åª / bzÀ£‚ÇÅ‚Å∫ * DzÀ£‚ÇÅ‚Å∫) +
        Œîz·∂ú·∂ú·∂†(i-1, j, k+1, grid) * (2Dx‚ÇÅ‚Åª + bx‚ÇÅ‚Åª / bzÀ£‚ÇÄ‚Åª * DzÀ£‚ÇÄ‚Åª + bx‚ÇÅ‚Åª / bzÀ£‚ÇÄ‚Å∫ * DzÀ£‚ÇÄ‚Å∫)
    )

    # Small slope approximation, let's try?
    ‚Ñõy‚Å∫ = 1 / 4Œîz·∂ú·∂ú·∂ú(i, j, k, grid) * (
        Œîz·∂ú·∂ú·∂†(i, j, k,   grid) * (2Dy‚ÇÅ‚Å∫ + by‚ÇÅ‚Å∫ / bz ∏‚ÇÇ‚Åª * Dz ∏‚ÇÇ‚Åª + by‚ÇÅ‚Å∫ / bz ∏‚ÇÇ‚Å∫ * Dz ∏‚ÇÇ‚Å∫) +
        Œîz·∂ú·∂ú·∂†(i, j, k+1, grid) * (2Dy‚ÇÅ‚Å∫ + by‚ÇÅ‚Å∫ / bz ∏‚ÇÅ‚Åª * Dz ∏‚ÇÅ‚Åª + by‚ÇÅ‚Å∫ / bz ∏‚ÇÅ‚Å∫ * Dz ∏‚ÇÅ‚Å∫)
    )

    ‚Ñõy‚Åª = 1 / 4Œîz·∂ú·∂ú·∂ú(i-1, j, k, grid) * (
        Œîz·∂ú·∂ú·∂†(i-1, j, k,   grid) * (2Dy‚ÇÅ‚Åª + by‚ÇÅ‚Åª / bz ∏‚ÇÅ‚Åª * Dz ∏‚ÇÅ‚Åª + by‚ÇÅ‚Åª / bz ∏‚ÇÅ‚Å∫ * Dz ∏‚ÇÅ‚Å∫) +
        Œîz·∂ú·∂ú·∂†(i-1, j, k+1, grid) * (2Dy‚ÇÅ‚Åª + by‚ÇÅ‚Åª / bz ∏‚ÇÄ‚Åª * Dz ∏‚ÇÄ‚Åª + by‚ÇÅ‚Åª / bz ∏‚ÇÄ‚Å∫ * Dz ∏‚ÇÄ‚Å∫)
    )

    # Small slope approximation, let's try?
    ‚Ñõz‚Å∫ = 1 / 4Œîx·∂ú·∂ú·∂ú(i, j, k, grid) * (
        Œîx·∂†·∂ú·∂ú(i, j, k,   grid) * (bx‚ÇÅ‚Åª / bzÀ£‚ÇÅ‚Å∫ * (bx‚ÇÅ‚Åª / bzÀ£‚ÇÅ‚Å∫ * DzÀ£‚ÇÅ‚Å∫ + Dx‚ÇÅ‚Åª)  +
                                  bx‚ÇÇ‚Åª / bzÀ£‚ÇÅ‚Å∫ * (bx‚ÇÇ‚Åª / bzÀ£‚ÇÅ‚Å∫ * DzÀ£‚ÇÅ‚Å∫ + Dx‚ÇÇ‚Åª)) +
        Œîx·∂†·∂ú·∂ú(i+1, j, k, grid) * (bx‚ÇÅ‚Å∫ / bzÀ£‚ÇÅ‚Å∫ * (bx‚ÇÅ‚Å∫ / bzÀ£‚ÇÅ‚Å∫ * DzÀ£‚ÇÅ‚Å∫ + Dx‚ÇÅ‚Å∫)  +
                                  bx‚ÇÇ‚Å∫ / bzÀ£‚ÇÅ‚Å∫ * (bx‚ÇÇ‚Å∫ / bzÀ£‚ÇÅ‚Å∫ * DzÀ£‚ÇÅ‚Å∫ + Dx‚ÇÇ‚Å∫))
    )

    ‚Ñõz‚Åª = 1 / 4Œîx·∂ú·∂ú·∂ú(i, j, k-1, grid) * (
        Œîx·∂†·∂ú·∂ú(i,   j, k-1, grid) * (bx‚ÇÄ‚Åª / bzÀ£‚ÇÅ‚Åª * (bx‚ÇÄ‚Åª / bzÀ£‚ÇÅ‚Åª * DzÀ£‚ÇÅ‚Åª + Dx‚ÇÄ‚Åª)  +
                                    bx‚ÇÅ‚Åª / bzÀ£‚ÇÅ‚Åª * (bx‚ÇÅ‚Åª / bzÀ£‚ÇÅ‚Åª * DzÀ£‚ÇÅ‚Åª + Dx‚ÇÅ‚Åª)) +
        Œîx·∂†·∂ú·∂ú(i+1, j, k-1, grid) * (bx‚ÇÄ‚Å∫ / bzÀ£‚ÇÅ‚Åª * (bx‚ÇÄ‚Å∫ / bzÀ£‚ÇÅ‚Åª * DzÀ£‚ÇÅ‚Åª + Dx‚ÇÄ‚Å∫)  +
                                    bx‚ÇÅ‚Å∫ / bzÀ£‚ÇÅ‚Åª * (bx‚ÇÅ‚Å∫ / bzÀ£‚ÇÅ‚Åª * DzÀ£‚ÇÅ‚Åª + Dx‚ÇÅ‚Å∫))
    )

    Œ± = scheme.rotation_percentage

    # Fluxes
    Fx‚Å∫ = ùíûx‚Å∫ + Œ± * ‚Ñõx‚Å∫ + (1 - Œ±) * ùíüx‚Å∫
    Fx‚Åª = ùíûx‚Åª + Œ± * ‚Ñõx‚Åª + (1 - Œ±) * ùíüx‚Åª                                           
    Fz‚Å∫ = ùíûz‚Å∫ + Œ± * ‚Ñõz‚Å∫ + (1 - Œ±) * ùíüz‚Å∫
    Fz‚Åª = ùíûz‚Åª + Œ± * ‚Ñõz‚Åª + (1 - Œ±) * ùíüz‚Åª
        
    return 1 / V·∂ú·∂ú·∂ú(i, j, k, grid) * (Fx‚Å∫ - Fx‚Åª + Fy‚Å∫ - Fy‚Åª + Fz‚Å∫ - Fz‚Åª)
end
