using Oceananigans.Grids: XFlatGrid, YFlatGrid
using Oceananigans: ‚àÇx_b, ‚àÇy_b, ‚àÇz_b
using Oceananigans.Operators

struct RotatedAdvection{N, FT, U} <: AbstractUpwindBiasedAdvectionScheme{N, FT}
    upwind_scheme :: U
end

RotatedAdvection(upwind_scheme::U) where U = 
    RotatedAdvection{required_halo_size_x(upwind_scheme), eltype(upwind_scheme), U}(upwind_scheme)

@inline rotated_div_Uc(i, j, k, grid, scheme, U, c, buoyancy, tracers) = div_Uc(i, j, k, grid, scheme, U, c)

@inline function rotated_div_Uc(i, j, k, grid, scheme::RotatedAdvection, U, c, buoyancy, tracers)
    
    upwind_scheme = scheme.upwind_scheme
    centered_scheme_x = x_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_y = y_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_z = z_advection(upwind_scheme).advecting_velocity_scheme

    ùíúx‚Å∫ = _advective_tracer_flux_x(i+1, j,   k,   grid, upwind_scheme, U.u, c)
    ùíúx‚Åª = _advective_tracer_flux_x(i,   j,   k,   grid, upwind_scheme, U.u, c)
    ùíúy‚Å∫ = _advective_tracer_flux_y(i,   j+1, k,   grid, upwind_scheme, U.v, c)
    ùíúy‚Åª = _advective_tracer_flux_y(i,   j,   k,   grid, upwind_scheme, U.v, c)
    ùíúz‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, upwind_scheme, U.w, c)
    ùíúz‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, upwind_scheme, U.w, c)

    ùíûx‚Å∫ = _advective_tracer_flux_x(i+1, j,   k,   grid, centered_scheme_x, U.u, c)
    ùíûx‚Åª = _advective_tracer_flux_x(i,   j,   k,   grid, centered_scheme_x, U.u, c)
    ùíûy‚Å∫ = _advective_tracer_flux_y(i,   j+1, k,   grid, centered_scheme_y, U.v, c)
    ùíûy‚Åª = _advective_tracer_flux_y(i,   j,   k,   grid, centered_scheme_y, U.v, c)
    ùíûz‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, centered_scheme_z, U.w, c)
    ùíûz‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, centered_scheme_z, U.w, c)

    ùíüx‚Å∫ = ùíúx‚Å∫ - ùíûx‚Å∫
    ùíüx‚Åª = ùíúx‚Åª - ùíûx‚Åª
    ùíüy‚Å∫ = ùíúy‚Å∫ - ùíûy‚Å∫
    ùíüy‚Åª = ùíúy‚Åª - ùíûy‚Åª
    ùíüz‚Å∫ = ùíúz‚Å∫ - ùíûz‚Å∫
    ùíüz‚Åª = ùíúz‚Åª - ùíûz‚Åª

    œµ = Œîz·∂ú·∂ú·∂ú(i, j, k, grid)^2 / max(Œîx·∂ú·∂ú·∂ú(i, j, k, grid), Œîy·∂ú·∂ú·∂ú(i, j, k, grid))^2

    bx‚Å∫ = ‚àÇx_b(i+1, j,   k,   grid, buoyancy, tracers)
    bx‚Åª = ‚àÇx_b(i,   j,   k,   grid, buoyancy, tracers)
    by‚Å∫ = ‚àÇy_b(i,   j+1, k,   grid, buoyancy, tracers)
    by‚Åª = ‚àÇy_b(i,   j,   k,   grid, buoyancy, tracers)
    bz‚Å∫ = ‚àÇz_b(i,   j,   k+1, grid, buoyancy, tracers)
    bz‚Åª = ‚àÇz_b(i,   j,   k,   grid, buoyancy, tracers)

    S = bz‚Å∫^2 + by‚Å∫^2 + bx‚Å∫^2

    R‚ÇÅ‚ÇÅ‚Å∫ = bz‚Å∫^2 + by‚Å∫^2 + œµ * bx‚Å∫^2
    R‚ÇÇ‚ÇÇ‚Å∫ = bz‚Å∫^2 + bx‚Å∫^2 + œµ * by‚Å∫^2
    R‚ÇÉ‚ÇÉ‚Å∫ = bx‚Å∫^2 + by‚Å∫^2 + œµ * bz‚Å∫^2

    R‚ÇÅ‚ÇÇ‚Å∫ = (œµ - 1) * bx‚Å∫ * by‚Å∫
    R‚ÇÅ‚ÇÉ‚Å∫ = (œµ - 1) * bx‚Å∫ * bz‚Å∫
    R‚ÇÇ‚ÇÉ‚Å∫ = (œµ - 1) * by‚Å∫ * bz‚Å∫
    
    R‚ÇÅ‚ÇÅ‚Åª = bz‚Åª^2 + by‚Åª^2 + œµ * bx‚Åª^2
    R‚ÇÇ‚ÇÇ‚Åª = bz‚Åª^2 + bx‚Åª^2 + œµ * by‚Åª^2
    R‚ÇÉ‚ÇÉ‚Åª = bx‚Åª^2 + by‚Åª^2 + œµ * bz‚Åª^2

    R‚ÇÅ‚ÇÇ‚Åª = (œµ - 1) * bx‚Åª * by‚Åª
    R‚ÇÅ‚ÇÉ‚Åª = (œµ - 1) * bx‚Åª * bz‚Åª
    R‚ÇÇ‚ÇÉ‚Åª = (œµ - 1) * by‚Åª * bz‚Åª

    Fx‚Å∫ = ùíûx‚Å∫ + ifelse(S < œµ, ùíüx‚Å∫, (R‚ÇÅ‚ÇÅ‚Å∫ * ùíüx‚Å∫ + R‚ÇÅ‚ÇÇ‚Å∫ * ùíüy‚Å∫ + R‚ÇÅ‚ÇÉ‚Å∫ * ùíüz‚Å∫) / S)
    Fy‚Å∫ = ùíûy‚Å∫ + ifelse(S < œµ, ùíüy‚Å∫, (R‚ÇÅ‚ÇÇ‚Å∫ * ùíüx‚Å∫ + R‚ÇÇ‚ÇÇ‚Å∫ * ùíüy‚Å∫ + R‚ÇÇ‚ÇÉ‚Å∫ * ùíüz‚Å∫) / S)
    Fz‚Å∫ = ùíûz‚Å∫ + ifelse(S < œµ, ùíüz‚Å∫, (R‚ÇÅ‚ÇÉ‚Å∫ * ùíüx‚Å∫ + R‚ÇÇ‚ÇÉ‚Å∫ * ùíüy‚Å∫ + R‚ÇÉ‚ÇÉ‚Å∫ * ùíüz‚Å∫) / S)

    Fx‚Åª = ùíûx‚Åª + ifelse(S < œµ, ùíüx‚Åª, (R‚ÇÅ‚ÇÅ‚Åª * ùíüx‚Åª + R‚ÇÅ‚ÇÇ‚Åª * ùíüy‚Åª + R‚ÇÅ‚ÇÉ‚Åª * ùíüz‚Åª) / S)
    Fy‚Åª = ùíûy‚Åª + ifelse(S < œµ, ùíüy‚Åª, (R‚ÇÅ‚ÇÇ‚Åª * ùíüx‚Åª + R‚ÇÇ‚ÇÇ‚Åª * ùíüy‚Åª + R‚ÇÇ‚ÇÉ‚Åª * ùíüz‚Åª) / S)
    Fz‚Åª = ùíûz‚Åª + ifelse(S < œµ, ùíüz‚Åª, (R‚ÇÅ‚ÇÉ‚Åª * ùíüx‚Åª + R‚ÇÇ‚ÇÉ‚Åª * ùíüy‚Åª + R‚ÇÉ‚ÇÉ‚Åª * ùíüz‚Åª) / S)

    return 1 / V·∂ú·∂ú·∂ú(i, j, k, grid) * (Fx‚Å∫ - Fx‚Åª + Fy‚Å∫ - Fy‚Åª + Fz‚Å∫ - Fz‚Åª)
end

@inline function rotated_div_Uc(i, j, k, grid::XFlatGrid, scheme::RotatedAdvection, U, c, buoyancy, tracers)
    
    upwind_scheme = scheme.upwind_scheme
    centered_scheme_y = y_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_z = z_advection(upwind_scheme).advecting_velocity_scheme

    ùíúy‚Å∫ = _advective_tracer_flux_y(i,   j+1, k,   grid, upwind_scheme, U.v, c)
    ùíúy‚Åª = _advective_tracer_flux_y(i,   j,   k,   grid, upwind_scheme, U.v, c)
    ùíúz‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, upwind_scheme, U.w, c)
    ùíúz‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, upwind_scheme, U.w, c)

    ùíûy‚Å∫ = _advective_tracer_flux_y(i,   j+1, k,   grid, centered_scheme_y, U.v, c)
    ùíûy‚Åª = _advective_tracer_flux_y(i,   j,   k,   grid, centered_scheme_y, U.v, c)
    ùíûz‚Å∫ = _advective_tracer_flux_z(i,   j,   k+1, grid, centered_scheme_z, U.w, c)
    ùíûz‚Åª = _advective_tracer_flux_z(i,   j,   k,   grid, centered_scheme_z, U.w, c)

    ùíüy‚Å∫ = ùíúy‚Å∫ - ùíûy‚Å∫
    ùíüy‚Åª = ùíúy‚Åª - ùíûy‚Åª
    ùíüz‚Å∫ = ùíúz‚Å∫ - ùíûz‚Å∫
    ùíüz‚Åª = ùíúz‚Åª - ùíûz‚Åª

    œµ = Œîz·∂ú·∂ú·∂ú(i, j, k, grid)^2 / Œîy·∂ú·∂ú·∂ú(i, j, k, grid)^2

    by‚Å∫ = ‚àÇy_b(i,   j+1, k,   grid, buoyancy, tracers)
    by‚Åª = ‚àÇy_b(i,   j,   k,   grid, buoyancy, tracers)
    bz‚Å∫ = ‚àÇz_b(i,   j,   k+1, grid, buoyancy, tracers)
    bz‚Åª = ‚àÇz_b(i,   j,   k,   grid, buoyancy, tracers)

    S = bz‚Å∫^2 + by‚Å∫^2

    R‚ÇÇ‚ÇÇ‚Å∫ = bz‚Å∫^2 + œµ * by‚Å∫^2
    R‚ÇÉ‚ÇÉ‚Å∫ = by‚Å∫^2 + œµ * bz‚Å∫^2

    R‚ÇÇ‚ÇÉ‚Å∫ = (œµ - 1) * by‚Å∫ * bz‚Å∫
    
    R‚ÇÇ‚ÇÇ‚Åª = bz‚Åª^2 + œµ * by‚Åª^2
    R‚ÇÉ‚ÇÉ‚Åª = by‚Åª^2 + œµ * bz‚Åª^2

    R‚ÇÇ‚ÇÉ‚Åª = (œµ - 1) * by‚Åª * bz‚Åª

    Fy‚Å∫ = ùíûy‚Å∫ + ifelse(S < œµ, ùíüy‚Å∫, (R‚ÇÇ‚ÇÇ‚Å∫ * ùíüy‚Å∫ + R‚ÇÇ‚ÇÉ‚Å∫ * ùíüz‚Å∫) / S)
    Fz‚Å∫ = ùíûz‚Å∫ + ifelse(S < œµ, ùíüz‚Å∫, (R‚ÇÇ‚ÇÉ‚Å∫ * ùíüy‚Å∫ + R‚ÇÉ‚ÇÉ‚Å∫ * ùíüz‚Å∫) / S)

    Fy‚Åª = ùíûy‚Åª + ifelse(S < œµ, ùíüy‚Åª, (R‚ÇÇ‚ÇÇ‚Åª * ùíüy‚Åª + R‚ÇÇ‚ÇÉ‚Åª * ùíüz‚Åª) / S)
    Fz‚Åª = ùíûz‚Åª + ifelse(S < œµ, ùíüz‚Åª, (R‚ÇÉ‚ÇÇ‚Åª * ùíüy‚Åª + R‚ÇÉ‚ÇÉ‚Åª * ùíüz‚Åª) / S)

    return 1 / V·∂ú·∂ú·∂ú(i, j, k, grid) * (Fy‚Å∫ - Fy‚Åª + Fz‚Å∫ - Fz‚Åª)
end

@inline function rotated_div_Uc(i, j, k, grid::YFlatGrid, scheme::RotatedAdvection, U, c, buoyancy, tracers)
    
    upwind_scheme = scheme.upwind_scheme
    centered_scheme_x = x_advection(upwind_scheme).advecting_velocity_scheme
    centered_scheme_z = z_advection(upwind_scheme).advecting_velocity_scheme

    ùíúx‚Å∫ = _advective_tracer_flux_x(i+1, j, k,   grid, upwind_scheme, U.u, c)
    ùíúx‚Åª = _advective_tracer_flux_x(i,   j, k,   grid, upwind_scheme, U.u, c)
    ùíúz‚Å∫ = _advective_tracer_flux_z(i,   j, k+1, grid, upwind_scheme, U.w, c)
    ùíúz‚Åª = _advective_tracer_flux_z(i,   j, k,   grid, upwind_scheme, U.w, c)

    ùíûx‚Å∫ = _advective_tracer_flux_x(i+1, j, k,   grid, centered_scheme_x, U.u, c)
    ùíûx‚Åª = _advective_tracer_flux_x(i,   j, k,   grid, centered_scheme_x, U.u, c)
    ùíûz‚Å∫ = _advective_tracer_flux_z(i,   j, k+1, grid, centered_scheme_z, U.w, c)
    ùíûz‚Åª = _advective_tracer_flux_z(i,   j, k,   grid, centered_scheme_z, U.w, c)

    ùíüx‚Å∫ = ùíúx‚Å∫ - ùíûx‚Å∫
    ùíüx‚Åª = ùíúx‚Åª - ùíûx‚Åª
    ùíüz‚Å∫ = ùíúz‚Å∫ - ùíûz‚Å∫
    ùíüz‚Åª = ùíúz‚Åª - ùíûz‚Åª

    œµ = Œîz·∂ú·∂ú·∂ú(i, j, k, grid)^2 / Œîx·∂ú·∂ú·∂ú(i, j, k, grid)^2

    R‚ÇÅ‚ÇÅ·∂†·∂ú·∂ú‚Å∫, R‚ÇÅ‚ÇÉ·∂†·∂ú·∂ú‚Å∫ = rotation_tensor·∂†·∂ú·∂ú(i+1, j, k,   grid, buoyancy, tracers, œµ)
    R‚ÇÅ‚ÇÅ·∂†·∂ú·∂ú‚Åª, R‚ÇÅ‚ÇÉ·∂†·∂ú·∂ú‚Åª = rotation_tensor·∂†·∂ú·∂ú(i,   j, k,   grid, buoyancy, tracers, œµ)
    R‚ÇÉ‚ÇÉ·∂ú·∂ú·∂†‚Å∫, R‚ÇÅ‚ÇÉ·∂ú·∂ú·∂†‚Å∫ = rotation_tensor·∂ú·∂ú·∂†(i,   j, k+1, grid, buoyancy, tracers, œµ)
    R‚ÇÉ‚ÇÉ·∂ú·∂ú·∂†‚Åª, R‚ÇÅ‚ÇÉ·∂ú·∂ú·∂†‚Åª = rotation_tensor·∂ú·∂ú·∂†(i,   j, k,   grid, buoyancy, tracers, œµ)


    Fx‚Å∫ = ùíûx‚Å∫ + R‚ÇÅ‚ÇÅ·∂†·∂ú·∂ú‚Å∫ * ùíüx‚Å∫ + R‚ÇÅ‚ÇÉ·∂†·∂ú·∂ú‚Å∫ * ùíüz‚Å∫
    Fz‚Å∫ = ùíûz‚Å∫ + R‚ÇÅ‚ÇÉ·∂ú·∂ú·∂†‚Å∫ * ùíüx‚Å∫ + R‚ÇÉ‚ÇÉ·∂ú·∂ú·∂†‚Å∫ * ùíüz‚Å∫
    Fx‚Åª = ùíûx‚Åª + R‚ÇÅ‚ÇÅ·∂†·∂ú·∂ú‚Åª * ùíüx‚Åª + R‚ÇÅ‚ÇÉ·∂†·∂ú·∂ú‚Åª * ùíüz‚Åª
    Fz‚Åª = ùíûz‚Åª + R‚ÇÅ‚ÇÉ·∂ú·∂ú·∂†‚Åª * ùíüx‚Åª + R‚ÇÉ‚ÇÉ·∂ú·∂ú·∂†‚Åª * ùíüz‚Åª

    return 1 / V·∂ú·∂ú·∂ú(i, j, k, grid) * (Fx‚Å∫ - Fx‚Åª + Fz‚Å∫ - Fz‚Åª)
end

@inline function rotation_tensor·∂†·∂ú·∂ú(i, j, k, grid::YFlatGrid, buoyancy, tracers, œµ)
    bx =   ‚àÇx_b(i, j, k, grid,       buoyancy, tracers) 
    bz = ‚Ñëxz·∂ú·µÉ·∂†(i, j, k, grid, ‚àÇz_b, buoyancy, tracers) 
    S  = bz^2 + bx^2
    Sx = abs(bx / bz)
    cond = (Sx < 10000) & (S > 0)

    R‚ÇÅ‚ÇÅ = ifelse(cond,   (bz^2 + œµ * bx^2) / S, one(grid)) 
    R‚ÇÅ‚ÇÉ = ifelse(cond, ((œµ - 1) * bx * bz) / S, zero(grid))

    return R‚ÇÅ‚ÇÅ, R‚ÇÅ‚ÇÉ
end

@inline function rotation_tensor·∂ú·∂†·∂ú(i, j, k, grid::XFlatGrid, buoyancy, tracers, œµ)
    bx = ‚Ñëxz·∂ú·µÉ·∂†(i, j, k, grid, ‚àÇx_b, buoyancy, tracers) 
    bz =   ‚àÇz_b(i, j, k, grid,       buoyancy, tracers) 
    S  = bz^2 + bx^2
    Sx = abs(bx / bz)
    cond = (Sx < 10000) & (S > 0)

    R‚ÇÉ‚ÇÉ = ifelse(cond, (  bx^2 + œµ * bz^2) / S,  one(grid))
    R‚ÇÅ‚ÇÉ = ifelse(cond, ((œµ - 1) * bx * bz) / S, zero(grid))

    return R‚ÇÉ‚ÇÉ, R‚ÇÅ‚ÇÉ
end

@inline function rotation_tensor·∂ú·∂ú·∂†(i, j, k, grid, buoyancy, tracers, œµ)
    bx = ‚Ñëxz·∂ú·µÉ·∂†(i, j, k, grid, ‚àÇx_b, buoyancy, tracers) 
    by = ‚Ñëyz·µÉ·∂ú·∂†(i, j, k, grid, ‚àÇy_b, buoyancy, tracers) 
    bz =   ‚àÇz_b(i, j, k, grid,       buoyancy, tracers) 
    S  = bz^2 + by^2 + bx^2
    Sx = abs(bx / bz)
    Sy = abs(by / bz)
    cond = (Sx < 10000) & (Sy < 10000) & (S > 0)
    
    R‚ÇÉ‚ÇÉ = ifelse(cond, (bx^2 + by^2 + œµ * bz^2) / S,  one(grid))
    R‚ÇÅ‚ÇÉ = ifelse(cond, ((œµ - 1) * bx * bz) / S, zero(grid))
    R‚ÇÇ‚ÇÉ = ifelse(cond, ((œµ - 1) * by * bz) / S, zero(grid))

    return R‚ÇÉ‚ÇÉ, R‚ÇÅ‚ÇÉ, R‚ÇÇ‚ÇÉ
end

@inline function rotation_tensor·∂ú·∂ú·∂†(i, j, k, grid::XFlatGrid, buoyancy, tracers, œµ)
    by = ‚Ñëyz·µÉ·∂ú·∂†(i, j, k, grid, ‚àÇy_b, buoyancy, tracers) 
    bz =   ‚àÇz_b(i, j, k, grid,       buoyancy, tracers) 
    S  = bz^2 + by^2
    Sy = abs(by / bz)
    cond = (Sy < 10000) & (S > 0)

    R‚ÇÉ‚ÇÉ = ifelse(cond, (  by^2 + œµ * bz^2) / S,  one(grid))
    R‚ÇÇ‚ÇÉ = ifelse(cond, ((œµ - 1) * by * bz) / S, zero(grid))

    return R‚ÇÉ‚ÇÉ, R‚ÇÇ‚ÇÉ
end

@inline function rotation_tensor·∂ú·∂ú·∂†(i, j, k, grid::YFlatGrid, buoyancy, tracers, œµ)
    bx = ‚Ñëxz·∂ú·µÉ·∂†(i, j, k, grid, ‚àÇx_b, buoyancy, tracers) 
    bz =   ‚àÇz_b(i, j, k, grid,       buoyancy, tracers) 
    S  = bz^2 + bx^2
    Sx = abs(bx / bz)
    cond = (Sx < 10000) & (S > 0)

    R‚ÇÉ‚ÇÉ = ifelse(cond, (  bx^2 + œµ * bz^2) / S,  one(grid))
    R‚ÇÅ‚ÇÉ = ifelse(cond, ((œµ - 1) * bx * bz) / S, zero(grid))

    return R‚ÇÉ‚ÇÉ, R‚ÇÅ‚ÇÉ
end