using Oceananigans.Operators
using Oceananigans.Architectures: device
using Oceananigans.TurbulenceClosures: ExplicitTimeDiscretization, ThreeDimensionalFormulation

using Oceananigans.TurbulenceClosures: 
                        AbstractScalarDiffusivity,
                        convert_diffusivity,
                        viscosity_location,
                        viscosity,
                        ŒΩ_œÉ·∂ú·∂ú·∂ú,
                        ‚àÇ‚±º_œÑ‚ÇÅ‚±º,
                        ‚àÇ‚±º_œÑ‚ÇÇ‚±º

import Oceananigans.TurbulenceClosures:
                        DiffusivityFields,
                        calculate_diffusivities!,
                        calculate_nonlinear_viscosity!,
                        viscosity,
                        with_tracers,
                        calc_nonlinear_ŒΩ·∂ú·∂ú·∂ú,
                        ŒΩ·∂ú·∂ú·∂ú

struct ShallowWaterScalarDiffusivity{N, X} <: AbstractScalarDiffusivity{ExplicitTimeDiscretization, ThreeDimensionalFormulation}
    ŒΩ :: N
    Œæ :: X
end

"""
    ShallowWaterScalarDiffusivity([FT::DataType=Float64;]
                                  ŒΩ=0, Œæ=0, discrete_form=false)

Return a scalar diffusivity for the shallow water model.

The diffusivity for the shallow water model is calculated as `h * ŒΩ` so that we get a
viscous term in the form ``h^{-1} ùõÅ ‚ãÖ (h ŒΩ t)``, where ``t`` is the 2D stress tensor plus
a trace, i.e., ``t = ùõÅùêÆ + (ùõÅùêÆ)^T - Œæ I ‚ãÖ (ùõÅ ‚ãÖ ùêÆ)``.

With the `VectorInvariantFormulation()` (that evolves ``u`` and ``v``) we compute
``h^{-1} ùõÅ(ŒΩ h ùõÅ t)``, while with the `ConservativeFormulation()` (that evolves
``u h`` and ``v h``) we compute ``ùõÅ (ŒΩ h ùõÅ t)``.
"""
function ShallowWaterScalarDiffusivity(FT::DataType=Float64; ŒΩ=0, Œæ=0, discrete_form=false)
    ŒΩ = convert_diffusivity(FT, ŒΩ; discrete_form)
    Œæ = convert_diffusivity(FT, Œæ; discrete_form)
    return ShallowWaterScalarDiffusivity(ŒΩ, Œæ)
end

# We have no tracers in the shallow water diffusivity
with_tracers(tracers, closure::ShallowWaterScalarDiffusivity) = closure
viscosity(closure::ShallowWaterScalarDiffusivity, K) = closure.ŒΩ

Adapt.adapt_structure(to, closure::ShallowWaterScalarDiffusivity) = 
    ShallowWaterScalarDiffusivity(Adapt.adapt(to, closure.ŒΩ), Adapt.adapt(to, closure.Œæ))

# The diffusivity for the shallow water model is calculated as h*ŒΩ in order to have a viscous term in the form
# h‚Åª¬π ‚àá ‚ãÖ (hŒΩ t) where t is the 2D stress tensor plus a trace => t = ‚àáu + (‚àáu)·µÄ - ŒæI‚ãÖ(‚àá‚ãÖu)

@kernel function _calculate_shallow_water_viscosity!(ŒΩ‚Çë, grid, closure, clock, fields)
    i, j, k = @index(Global, NTuple)
    ŒΩ‚Çë[i, j, k] = fields.h[i, j, k] * ŒΩ·∂ú·∂ú·∂ú(i, j, k, grid, viscosity_location(closure), closure.ŒΩ, clock, fields)
end

function calculate_diffusivities!(diffusivity_fields, closure::ShallowWaterScalarDiffusivity, model)

    arch  = model.architecture
    grid  = model.grid
    clock = model.clock

    model_fields = shallow_water_fields(model.velocities, model.tracers, model.solution, formulation(model))

    launch!(arch, grid, :xyz,
            _calculate_shallow_water_viscosity!,
            diffusivity_fields.ŒΩ‚Çë, grid, closure, clock, model_fields)

    return nothing
end

DiffusivityFields(grid, tracer_names, bcs, ::ShallowWaterScalarDiffusivity) = (; ŒΩ‚Çë=CenterField(grid, boundary_conditions=bcs.h))

#####
##### Diffusion flux divergence operators
#####

@inline sw_‚àÇ‚±º_œÑ‚ÇÅ‚±º(i, j, k, grid, closure, K, clock, fields, ::ConservativeFormulation) =
        ‚àÇ‚±º_œÑ‚ÇÅ‚±º(i, j, k, grid, closure, K, clock, fields, nothing) + trace_term_x(i, j, k, grid, closure, K, clock, fields)

@inline sw_‚àÇ‚±º_œÑ‚ÇÇ‚±º(i, j, k, grid, closure, K, clock, fields, ::ConservativeFormulation) =
        ‚àÇ‚±º_œÑ‚ÇÇ‚±º(i, j, k, grid, closure, K, clock, fields, nothing) + trace_term_y(i, j, k, grid, closure, K, clock, fields)

@inline sw_‚àÇ‚±º_œÑ‚ÇÅ‚±º(i, j, k, grid, closure, K, clock, fields, ::VectorInvariantFormulation) =
       (‚àÇ‚±º_œÑ‚ÇÅ‚±º(i, j, k, grid, closure, K, clock, fields, nothing) + trace_term_x(i, j, k, grid, closure, K, clock, fields) ) / ‚Ñëx·∂†·µÉ·µÉ(i, j, k, grid, fields.h)

@inline sw_‚àÇ‚±º_œÑ‚ÇÇ‚±º(i, j, k, grid, closure, K, clock, fields, ::VectorInvariantFormulation) =
       (‚àÇ‚±º_œÑ‚ÇÇ‚±º(i, j, k, grid, closure, K, clock, fields, nothing) + trace_term_y(i, j, k, grid, closure, K, clock, fields) ) / ‚Ñëy·µÉ·∂†·µÉ(i, j, k, grid, fields.h)

@inline trace_term_x(i, j, k, grid, clo, K, clk, fields) = - Œ¥x·∂†·µÉ·µÉ(i, j, k, grid, ŒΩ_œÉ·∂ú·∂ú·∂ú, clo, K, clk, fields, div_xy·∂ú·∂ú·∂ú, fields.u, fields.v) * clo.Œæ / Az·∂†·∂ú·∂ú(i, j, k, grid)
@inline trace_term_y(i, j, k, grid, clo, K, clk, fields) = - Œ¥y·µÉ·∂†·µÉ(i, j, k, grid, ŒΩ_œÉ·∂ú·∂ú·∂ú, clo, K, clk, fields, div_xy·∂ú·∂ú·∂ú, fields.u, fields.v) * clo.Œæ / Az·∂†·∂ú·∂ú(i, j, k, grid)

@inline trace_term_x(i, j, k, grid, ::Nothing, args...) = zero(grid)
@inline trace_term_y(i, j, k, grid, ::Nothing, args...) = zero(grid)
