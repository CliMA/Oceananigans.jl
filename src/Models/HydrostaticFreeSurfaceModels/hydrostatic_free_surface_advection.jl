using Oceananigans.Operators

using Oceananigans.Operators: Œîx_q·∂ú·∂†·∂ú, Œîy_q·∂†·∂ú·∂ú, Œîx·∂†·∂ú·∂ú, Œîy·∂ú·∂†·∂ú, Az_q·∂ú·∂ú·∂ú
using Oceananigans.Advection: div_ùêØu, div_ùêØv

######
###### Horizontally-vector-invariant formulation of momentum advection
######
###### Follows https://mitgcm.readthedocs.io/en/latest/algorithm/algorithm.html#vector-invariant-momentum-equations
######

@inline œï¬≤(i, j, k, grid, œï) = @inbounds œï[i, j, k]^2
@inline Kh·∂ú·∂ú·∂ú(i, j, k, grid, u, v) = (‚Ñëx·∂ú·µÉ·µÉ(i, j, k, grid, œï¬≤, u) + ‚Ñëy·µÉ·∂ú·µÉ(i, j, k, grid, œï¬≤, v)) / 2

@inbounds Œ∂‚ÇÇw·∂†·∂ú·∂†(i, j, k, grid, u, w) = ‚Ñëx·∂†·µÉ·µÉ(i, j, k, grid, Az_q·∂ú·∂ú·∂ú, w) * ‚àÇz·∂†·∂ú·∂†(i, j, k, grid, u) / Az·∂†·∂ú·∂ú(i, j, k, grid)
@inbounds Œ∂‚ÇÅw·∂ú·∂†·∂†(i, j, k, grid, v, w) = ‚Ñëy·µÉ·∂†·µÉ(i, j, k, grid, Az_q·∂ú·∂ú·∂ú, w) * ‚àÇz·∂ú·∂†·∂†(i, j, k, grid, v) / Az·∂ú·∂†·∂ú(i, j, k, grid)

@inline U_dot_‚àáu(i, j, k, grid, advection::VectorInvariant, U) = (
    - ‚Ñëy·µÉ·∂ú·µÉ(i, j, k, grid, Œ∂‚ÇÉ·∂†·∂†·∂ú, U.u, U.v) * ‚Ñëx·∂†·µÉ·µÉ(i, j, k, grid, ‚Ñëy·µÉ·∂ú·µÉ, Œîx_q·∂ú·∂†·∂ú, U.v) / Œîx·∂†·∂ú·∂ú(i, j, k, grid) # Vertical relative vorticity term
    + ‚àÇx·∂†·∂ú·∂ú(i, j, k, grid, Kh·∂ú·∂ú·∂ú, U.u, U.v)    # Bernoulli head term
    + ‚Ñëz·µÉ·µÉ·∂ú(i, j, k, grid, Œ∂‚ÇÇw·∂†·∂ú·∂†, U.u, U.w))  # Horizontal vorticity / vertical advection term

@inline U_dot_‚àáv(i, j, k, grid, advection::VectorInvariant, U) = (
    + ‚Ñëx·∂ú·µÉ·µÉ(i, j, k, grid, Œ∂‚ÇÉ·∂†·∂†·∂ú, U.u, U.v) * ‚Ñëy·µÉ·∂†·µÉ(i, j, k, grid, ‚Ñëx·∂ú·µÉ·µÉ, Œîy_q·∂†·∂ú·∂ú, U.u) / Œîy·∂ú·∂†·∂ú(i, j, k, grid) # Vertical relative vorticity term
    + ‚àÇy·∂ú·∂†·∂ú(i, j, k, grid, Kh·∂ú·∂ú·∂ú, U.u, U.v)   # Bernoulli head term
    + ‚Ñëz·µÉ·µÉ·∂ú(i, j, k, grid, Œ∂‚ÇÅw·∂ú·∂†·∂†, U.v, U.w)) # Horizontal vorticity / vertical advection term

######
###### Conservative formulation of momentum advection
######

@inline U_dot_‚àáu(i, j, k, grid, advection::AbstractAdvectionScheme, U) = div_ùêØu(i, j, k, grid, advection, U, U.u)
@inline U_dot_‚àáv(i, j, k, grid, advection::AbstractAdvectionScheme, U) = div_ùêØv(i, j, k, grid, advection, U, U.v)

######
###### No advection
######

@inline U_dot_‚àáu(i, j, k, grid::AbstractGrid{FT}, advection::Nothing, U) where FT = zero(FT)
@inline U_dot_‚àáv(i, j, k, grid::AbstractGrid{FT}, advection::Nothing, U) where FT = zero(FT)
