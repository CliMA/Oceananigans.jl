# TODO: have a general Oceananigans-wide function that retrieves a pointwise
# value for a function, an array, a number, a field etc?
# This would be a generalization of `getbc` that could be used everywhere we need it
@inline getvalue(::Nothing,        i, j, k, grid, args...) = nothing
@inline getvalue(a::Number,        i, j, k, grid, args...) = a
@inline getvalue(a::AbstractArray, i, j, k, grid, args...) = @inbounds a[i, j, k]

"""
    intrinsic_vector(i, j, k, grid::AbstractGrid, u‚Çë, v‚Çë, w‚Çë)

Convert the three-dimensional vector with components `u‚Çë, v‚Çë, w‚Çë` defined in an _extrinsic_ 
reference frame associated with the domain, to the reference frame _intrinsic_ to the grid. 

_extrinsic_ reference frames are:

- Cartesian for box domains 
- Latitude - Longitude for spherical domains

Therefore, for the [`RectilinearGrid`](@ref) and the [`LatitudeLongitudeGrid`](@ref), the _extrinsic_ and the 
_intrinsic_ reference frames are equivalent. However, for other grids (e.g., for the
 [`ConformalCubedSphereGrid`](@ref)) that might not be the case.
"""
@inline intrinsic_vector(i, j, k, grid::AbstractGrid, u‚Çë, v‚Çë, w‚Çë) = 
    getvalue(u‚Çë, i, j, k, grid), getvalue(v‚Çë, i, j, k, grid), getvalue(w‚Çë, i, j, k, grid)

"""
    extrinsic_vector(i, j, k, grid::AbstractGrid, u·µ¢, v·µ¢, w·µ¢)

Convert the three-dimensional vector with components `u·µ¢, v·µ¢, w·µ¢ ` defined on the _intrinsic_ reference 
frame of the grid, to the _extrinsic_ reference frame associated with the domain.

_extrinsic_ reference frames are:

- Cartesian for box domains 
- Latitude - Longitude for spherical domains

Therefore, for the `RectilinearGrid` and the `LatitudeLongitudeGrid`, the _extrinsic_ and the 
_intrinsic_ reference frames are equivalent
"""
@inline extrinsic_vector(i, j, k, grid::AbstractGrid, u·µ¢, v·µ¢, w·µ¢) =
    getvalue(u·µ¢, i, j, k, grid), getvalue(v·µ¢, i, j, k, grid), getvalue(w·µ¢, i, j, k, grid)



# Intrinsic and extrinsic conversion for `OrthogonalSphericalShellGrid`s,
# i.e. curvilinear grids defined on a sphere which are locally orthogonal.
# If the coordinates match with the coordinates of a latitude-longitude grid
# (i.e. globally orthogonal), these functions collapse to 
# u‚Çë, v‚Çë, w‚Çë = u·µ¢, v·µ¢, w·µ¢
@inline function intrinsic_vector(i, j, k, grid::OrthogonalSphericalShellGrid, u·µ¢, v·µ¢, w·µ¢)

    œÜ·∂ú·∂†·µÉ‚Çä = œÜnode(i, j+1, 1, grid, Center(), Face(), Center())
    œÜ·∂ú·∂†·µÉ‚Çã = œÜnode(i,   j, 1, grid, Center(), Face(), Center())
    Œîy·∂ú·∂ú·µÉ = Œîy·∂ú·∂ú·∂ú(i,   j, 1, grid)

    uÃÉ = deg2rad(œÜ·∂ú·∂†·µÉ‚Çä - œÜ·∂ú·∂†·µÉ‚Çã) / Œîy·∂ú·∂ú·µÉ

    œÜ·∂†·∂ú·µÉ‚Çä = œÜnode(i+1, j, 1, grid, Face(), Center(), Center())
    œÜ·∂†·∂ú·µÉ‚Çã = œÜnode(i,   j, 1, grid, Face(), Center(), Center())
    Œîx·∂ú·∂ú·µÉ = Œîx·∂ú·∂ú·∂ú(i,   j, 1, grid)

    vÃÉ = - deg2rad(œÜ·∂†·∂ú·µÉ‚Çä - œÜ·∂†·∂ú·µÉ‚Çã) / Œîx·∂ú·∂ú·µÉ

    ùí∞ = sqrt(uÃÉ^2 + vÃÉ^2)

    u  = getvalue(u‚Çë, i, j, k, grid)
    v  = getvalue(v‚Çë, i, j, k, grid)
    w·µ¢ = getvalue(w‚Çë, i, j, k, grid)

    d‚ÇÅ = uÃÉ / ùí∞
    d‚ÇÇ = vÃÉ / ùí∞

    u·µ¢ = u * d‚ÇÅ + v * d‚ÇÇ
    v·µ¢ = u * d‚ÇÇ - v * d‚ÇÅ

    return u·µ¢, v·µ¢, w·µ¢
end

@inline function extrinsic_vector(i, j, k, grid::OrthogonalSphericalShellGrid, u·µ¢, v·µ¢, w·µ¢)

    œÜ·∂ú·∂†·µÉ‚Çä = œÜnode(i, j+1, 1, grid, Center(), Face(), Center())
    œÜ·∂ú·∂†·µÉ‚Çã = œÜnode(i,   j, 1, grid, Center(), Face(), Center())
    Œîy·∂ú·∂ú·µÉ = Œîy·∂ú·∂ú·∂ú(i,   j, 1, grid)

    uÃÉ = deg2rad(œÜ·∂ú·∂†·µÉ‚Çä - œÜ·∂ú·∂†·µÉ‚Çã) / Œîy·∂ú·∂ú·µÉ

    œÜ·∂†·∂ú·µÉ‚Çä = œÜnode(i+1, j, 1, grid, Face(), Center(), Center())
    œÜ·∂†·∂ú·µÉ‚Çã = œÜnode(i,   j, 1, grid, Face(), Center(), Center())
    Œîx·∂ú·∂ú·µÉ = Œîx·∂ú·∂ú·∂ú(i,   j, 1, grid)

    vÃÉ = - deg2rad(œÜ·∂†·∂ú·µÉ‚Çä - œÜ·∂†·∂ú·µÉ‚Çã) / Œîx·∂ú·∂ú·µÉ

    ùí∞ = sqrt(uÃÉ^2 + vÃÉ^2)

    u  = getvalue(u·µ¢, i, j, k, grid)
    v  = getvalue(v·µ¢, i, j, k, grid)
    w‚Çë = getvalue(w·µ¢, i, j, k, grid)

    d‚ÇÅ = uÃÉ / ùí∞
    d‚ÇÇ = vÃÉ / ùí∞

    u‚Çë = u * d‚ÇÅ - v * d‚ÇÇ
    v‚Çë = u * d‚ÇÇ + v * d‚ÇÅ

    return u‚Çë, v‚Çë, w‚Çë
end

#####
##### Component-wise conversion between reference frames
#####

@inline intrinsic_vector_x_component(i, j, k, grid::AbstractGrid, u‚Çë, v‚Çë, w‚Çë) = 
    @inbounds intrinsic_vector(i, j, k, grid, u‚Çë, v‚Çë, w‚Çë)[1]
    
@inline intrinsic_vector_y_component(i, j, k, grid::AbstractGrid, u‚Çë, v‚Çë, w‚Çë) =
    @inbounds intrinsic_vector(i, j, k, grid, u‚Çë, v‚Çë, w‚Çë)[2]

@inline intrinsic_vector_z_component(i, j, k, grid::AbstractGrid, u‚Çë, v‚Çë, w‚Çë) =
    @inbounds intrinsic_vector(i, j, k, grid, u‚Çë, v‚Çë, w‚Çë)[3]

@inline extrinsic_vector_x_component(i, j, k, grid::AbstractGrid, u‚Çë, v‚Çë, w‚Çë) =
    @inbounds intrinsic_vector(i, j, k, grid, u‚Çë, v‚Çë, w‚Çë)[1]
    
@inline extrinsic_vector_y_component(i, j, k, grid::AbstractGrid, u‚Çë, v‚Çë, w‚Çë) =
    @inbounds intrinsic_vector(i, j, k, grid, u‚Çë, v‚Çë, w‚Çë)[2]

@inline extrinsic_vector_z_component(i, j, k, grid::AbstractGrid, u‚Çë, v‚Çë, w‚Çë) =
    @inbounds intrinsic_vector(i, j, k, grid, u‚Çë, v‚Çë, w‚Çë)[3]
