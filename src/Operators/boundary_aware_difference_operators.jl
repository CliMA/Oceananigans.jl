# Defining Difference operators that return zero over a boundary
@inline conditional_δx_f(LY, LZ, i, j, k, grid::AbstractGrid, δx, args...) = ifelse(inactive_node(i, j, k, grid, c, LY, LZ) | inactive_node(i-1, j, k, grid, c, LY, LZ), zero(grid), δx(i, j, k, grid, args...))
@inline conditional_δx_c(LY, LZ, i, j, k, grid::AbstractGrid, δx, args...) = ifelse(inactive_node(i, j, k, grid, f, LY, LZ) | inactive_node(i+1, j, k, grid, f, LY, LZ), zero(grid), δx(i, j, k, grid, args...))
@inline conditional_δy_f(LX, LZ, i, j, k, grid::AbstractGrid, δy, args...) = ifelse(inactive_node(i, j, k, grid, LX, c, LZ) | inactive_node(i, j-1, k, grid, LX, c, LZ), zero(grid), δy(i, j, k, grid, args...))
@inline conditional_δy_c(LX, LZ, i, j, k, grid::AbstractGrid, δy, args...) = ifelse(inactive_node(i, j, k, grid, LX, f, LZ) | inactive_node(i, j+1, k, grid, LX, f, LZ), zero(grid), δy(i, j, k, grid, args...))
@inline conditional_δz_f(LX, LY, i, j, k, grid::AbstractGrid, δz, args...) = ifelse(inactive_node(i, j, k, grid, LX, LY, c) | inactive_node(i, j, k-1, grid, LX, LY, c), zero(grid), δz(i, j, k, grid, args...))
@inline conditional_δz_c(LX, LY, i, j, k, grid::AbstractGrid, δz, args...) = ifelse(inactive_node(i, j, k, grid, LX, LY, f) | inactive_node(i, j, k+1, grid, LX, LY, f), zero(grid), δz(i, j, k, grid, args...))

@inline δxᴮᶜᶜᶜ(i, j, k, ibg, args...) = conditional_δx_c(c, c, i, j, k, ibg, δxᶜᵃᵃ, args...)
@inline δxᴮᶠᶜᶜ(i, j, k, ibg, args...) = conditional_δx_f(c, c, i, j, k, ibg, δxᶠᵃᵃ, args...)
@inline δyᴮᶜᶜᶜ(i, j, k, ibg, args...) = conditional_δy_c(c, c, i, j, k, ibg, δyᵃᶜᵃ, args...)
@inline δyᴮᶜᶠᶜ(i, j, k, ibg, args...) = conditional_δy_f(c, c, i, j, k, ibg, δyᵃᶠᵃ, args...)
@inline δzᴮᶜᶜᶜ(i, j, k, ibg, args...) = conditional_δz_c(c, c, i, j, k, ibg, δzᵃᵃᶜ, args...)
@inline δzᴮᶜᶜᶠ(i, j, k, ibg, args...) = conditional_δz_f(c, c, i, j, k, ibg, δzᵃᵃᶠ, args...)

@inline δxᴮᶜᶠᶜ(i, j, k, ibg, args...) = conditional_δx_c(f, c, i, j, k, ibg, δxᶜᵃᵃ, args...)
@inline δxᴮᶠᶠᶜ(i, j, k, ibg, args...) = conditional_δx_f(f, c, i, j, k, ibg, δxᶠᵃᵃ, args...)
@inline δyᴮᶠᶜᶜ(i, j, k, ibg, args...) = conditional_δy_c(f, c, i, j, k, ibg, δyᵃᶜᵃ, args...)
@inline δyᴮᶠᶠᶜ(i, j, k, ibg, args...) = conditional_δy_f(f, c, i, j, k, ibg, δyᵃᶠᵃ, args...)
@inline δzᴮᶠᶜᶜ(i, j, k, ibg, args...) = conditional_δz_c(f, c, i, j, k, ibg, δzᵃᵃᶜ, args...)
@inline δzᴮᶠᶜᶠ(i, j, k, ibg, args...) = conditional_δz_f(f, c, i, j, k, ibg, δzᵃᵃᶠ, args...)

@inline δxᴮᶜᶜᶠ(i, j, k, ibg, args...) = conditional_δx_c(c, f, i, j, k, ibg, δxᶜᵃᵃ, args...)
@inline δxᴮᶠᶜᶠ(i, j, k, ibg, args...) = conditional_δx_f(c, f, i, j, k, ibg, δxᶠᵃᵃ, args...)
@inline δyᴮᶜᶜᶠ(i, j, k, ibg, args...) = conditional_δy_c(c, f, i, j, k, ibg, δyᵃᶜᵃ, args...)
@inline δyᴮᶜᶠᶠ(i, j, k, ibg, args...) = conditional_δy_f(c, f, i, j, k, ibg, δyᵃᶠᵃ, args...)
@inline δzᴮᶜᶠᶜ(i, j, k, ibg, args...) = conditional_δz_c(c, f, i, j, k, ibg, δzᵃᵃᶜ, args...)
@inline δzᴮᶜᶠᶠ(i, j, k, ibg, args...) = conditional_δz_f(c, f, i, j, k, ibg, δzᵃᵃᶠ, args...)

@inline δxᴮᶜᶠᶠ(i, j, k, ibg, args...) = conditional_δx_c(f, f, i, j, k, ibg, δxᶜᵃᵃ, args...)
@inline δxᴮᶠᶠᶠ(i, j, k, ibg, args...) = conditional_δx_f(f, f, i, j, k, ibg, δxᶠᵃᵃ, args...)
@inline δyᴮᶠᶜᶠ(i, j, k, ibg, args...) = conditional_δy_c(f, f, i, j, k, ibg, δyᵃᶜᵃ, args...)
@inline δyᴮᶠᶠᶠ(i, j, k, ibg, args...) = conditional_δy_f(f, f, i, j, k, ibg, δyᵃᶠᵃ, args...)
@inline δzᴮᶠᶠᶜ(i, j, k, ibg, args...) = conditional_δz_c(f, f, i, j, k, ibg, δzᵃᵃᶜ, args...)
@inline δzᴮᶠᶠᶠ(i, j, k, ibg, args...) = conditional_δz_f(f, f, i, j, k, ibg, δzᵃᵃᶠ, args...)

@inline δxyᴮᶜᶜᶜ(i, j, k, grid, args...) = δyᴮᶜᶜᶜ(i, j, k, grid, δxᴮᶜᶜᶜ, args...)
@inline δxyᴮᶠᶜᶜ(i, j, k, grid, args...) = δyᴮᶠᶜᶜ(i, j, k, grid, δxᴮᶠᶜᶜ, args...)
@inline δxyᴮᶜᶠᶜ(i, j, k, grid, args...) = δyᴮᶜᶠᶜ(i, j, k, grid, δxᴮᶜᶠᶜ, args...)
@inline δxyᴮᶠᶠᶜ(i, j, k, grid, args...) = δyᴮᶠᶠᶜ(i, j, k, grid, δxᴮᶠᶠᶜ, args...)
@inline δxyᴮᶜᶠᶠ(i, j, k, grid, args...) = δyᴮᶜᶠᶠ(i, j, k, grid, δxᴮᶜᶠᶠ, args...)
@inline δxyᴮᶠᶠᶠ(i, j, k, grid, args...) = δyᴮᶠᶠᶠ(i, j, k, grid, δxᴮᶠᶠᶠ, args...)

@inline δxzᴮᶜᶜᶜ(i, j, k, grid, args...) = δzᴮᶜᶜᶜ(i, j, k, grid, δxᴮᶜᶜᶜ, args...)
@inline δxzᴮᶠᶜᶜ(i, j, k, grid, args...) = δzᴮᶠᶜᶜ(i, j, k, grid, δxᴮᶠᶜᶜ, args...)
@inline δxzᴮᶜᶠᶜ(i, j, k, grid, args...) = δzᴮᶜᶠᶜ(i, j, k, grid, δxᴮᶜᶠᶜ, args...)
@inline δxzᴮᶠᶠᶜ(i, j, k, grid, args...) = δzᴮᶠᶠᶜ(i, j, k, grid, δxᴮᶠᶠᶜ, args...)
@inline δxzᴮᶜᶠᶠ(i, j, k, grid, args...) = δzᴮᶜᶠᶠ(i, j, k, grid, δxᴮᶜᶠᶠ, args...)
@inline δxzᴮᶠᶠᶠ(i, j, k, grid, args...) = δzᴮᶠᶠᶠ(i, j, k, grid, δxᴮᶠᶠᶠ, args...)

@inline δyzᴮᶜᶜᶜ(i, j, k, grid, args...) = δzᴮᶜᶜᶜ(i, j, k, grid, δyᴮᶜᶜᶜ, args...)
@inline δyzᴮᶠᶜᶜ(i, j, k, grid, args...) = δzᴮᶠᶜᶜ(i, j, k, grid, δyᴮᶠᶜᶜ, args...)
@inline δyzᴮᶜᶠᶜ(i, j, k, grid, args...) = δzᴮᶜᶠᶜ(i, j, k, grid, δyᴮᶜᶠᶜ, args...)
@inline δyzᴮᶠᶠᶜ(i, j, k, grid, args...) = δzᴮᶠᶠᶜ(i, j, k, grid, δyᴮᶠᶠᶜ, args...)
@inline δyzᴮᶜᶠᶠ(i, j, k, grid, args...) = δzᴮᶜᶠᶠ(i, j, k, grid, δyᴮᶜᶠᶠ, args...)
@inline δyzᴮᶠᶠᶠ(i, j, k, grid, args...) = δzᴮᶠᶠᶠ(i, j, k, grid, δyᴮᶠᶠᶠ, args...)

@inline δxyzᴮᶜᶜᶜ(i, j, k, grid, args...) = δzᴮᶜᶜᶜ(i, j, k, grid, δxyᴮᶜᶜᶜ, args...)
@inline δxyzᴮᶠᶜᶜ(i, j, k, grid, args...) = δzᴮᶠᶜᶜ(i, j, k, grid, δxyᴮᶠᶜᶜ, args...)
@inline δxyzᴮᶜᶠᶜ(i, j, k, grid, args...) = δzᴮᶜᶠᶜ(i, j, k, grid, δxyᴮᶜᶠᶜ, args...)
@inline δxyzᴮᶠᶠᶜ(i, j, k, grid, args...) = δzᴮᶠᶠᶜ(i, j, k, grid, δxyᴮᶠᶠᶜ, args...)
@inline δxyzᴮᶜᶠᶠ(i, j, k, grid, args...) = δzᴮᶜᶠᶠ(i, j, k, grid, δxyᴮᶜᶠᶠ, args...)
@inline δxyzᴮᶠᶠᶠ(i, j, k, grid, args...) = δzᴮᶠᶠᶠ(i, j, k, grid, δxyᴮᶠᶠᶠ, args...)