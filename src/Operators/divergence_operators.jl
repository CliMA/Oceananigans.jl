#####
##### Divergence operators
#####

"""
    div·∂ú·∂ú·∂ú(i, j, k, grid, u, v, w)

Calculate the divergence ``ùõÅ¬∑ùêï`` of a vector field ``ùêï = (u, v, w)``,

```julia
1/V * [Œ¥x·∂ú·µÉ·µÉ(Ax * u) + Œ¥x·µÉ·∂ú·µÉ(Ay * v) + Œ¥z·µÉ·µÉ·∂ú(Az * w)]
```

which ends up at the cell centers `ccc`.
"""
@inline div·∂ú·∂ú·∂ú(i, j, k, grid, u, v, w) = 
    1 / V·∂ú·∂ú·∂ú(i, j, k, grid) * (Œ¥x·∂ú·∂ú·∂ú(i, j, k, grid, Ax_q·∂†·∂ú·∂ú, u) +
                               Œ¥y·∂ú·∂ú·∂ú(i, j, k, grid, Ay_q·∂ú·∂†·∂ú, v) +
                               Œ¥z·∂ú·∂ú·∂ú(i, j, k, grid, Az_q·∂ú·∂ú·∂†, w))

"""
    div_xy·∂ú·∂ú·µÉ(i, j, k, grid, u, v)

Return the discrete `div_xy = ‚àÇx u + ‚àÇy v` of velocity field `u, v` defined as

```julia
1 / Az·∂ú·∂ú·µÉ * [Œ¥x·∂ú·µÉ·µÉ(Œîy·µÉ·∂ú·µÉ * u) + Œ¥y·µÉ·∂ú·µÉ(Œîx·∂ú·µÉ·µÉ * v)]
```

at `i, j, k`, where `Az·∂ú·∂ú·µÉ` is the area of the cell centered on (Center, Center, Any) --- a tracer cell,
`Œîy` is the length of the cell centered on (Face, Center, Any) in `y` (a `u` cell),
and `Œîx` is the length of the cell centered on (Center, Face, Any) in `x` (a `v` cell).
`div_xy·∂ú·∂ú·µÉ` ends up at the location `cca`.
"""
@inline flux_div_xy·∂ú·∂ú·∂ú(i, j, k, grid, u, v) = (Œ¥x·∂ú·∂ú·∂ú(i, j, k, grid, Ax_q·∂†·∂ú·∂ú, u) +
                                               Œ¥y·∂ú·∂ú·∂ú(i, j, k, grid, Ay_q·∂ú·∂†·∂ú, v))

@inline div_xy·∂ú·∂ú·∂ú(i, j, k, grid, u, v) = 
    1 / V·∂ú·∂ú·∂ú(i, j, k, grid) * flux_div_xy·∂ú·∂ú·∂ú(i, j, k, grid, u, v)

@inline div_xy·∂ú·∂ú·∂†(i, j, k, grid, Qu, Qv) = 
    1 / V·∂ú·∂ú·∂†(i, j, k, grid) * (Œ¥x·∂ú·∂ú·∂†(i, j, k, grid, Ay_q·∂†·∂ú·∂†, Qu) +
                               Œ¥y·∂ú·∂ú·∂†(i, j, k, grid, Ax_q·∂ú·∂†·∂†, Qv))

# Convention
index_left(i, ::Center)  = i
index_left(i, ::Face)    = i - 1
index_right(i, ::Center) = i + 1
index_right(i, ::Face)   = i

@inline Base.div(i, j, k, grid::AbstractGrid, loc, q_west, q_east, q_south, q_north, q_bottom, q_top) =
    1 / volume(i, j, k, grid, loc...) * (Œ¥x_Ax_q(i, j, k, grid, loc, q_west, q_east) + 
                                         Œ¥y_Ay_q(i, j, k, grid, loc, q_south, q_north) + 
                                         Œ¥z_Az_q(i, j, k, grid, loc, q_bottom, q_top))
    
@inline function Œ¥x_Ax_q(i, j, k, grid, (LX, LY, LZ), q·µÇ, q·¥±)
    i·µÇ = index_left(i, LX)
    Ax·µÇ = Ax(i·µÇ, j, k, grid, LX, LY, LZ)

    i·¥± = index_right(i, LX)
    Ax·¥± = Ax(i·¥±, j, k, grid, LX, LY, LZ)

    return Ax·¥± * q·¥± - Ax·µÇ * q·µÇ
end

@inline function Œ¥y_Ay_q(i, j, k, grid, (LX, LY, LZ), qÀ¢, q·¥∫)
    jÀ¢ = index_left(j, LY)
    AyÀ¢ = Ay(i, jÀ¢, k, grid, LX, LY, LZ)

    j·¥∫ = index_right(j, LY)
    Ay·¥∫ = Ay(i, j·¥∫, k, grid, LX, LY, LZ)

    return Ay·¥∫ * q·¥∫ - AyÀ¢ * qÀ¢
end

@inline function Œ¥z_Az_q(i, j, k, grid, (LX, LY, LZ), q·¥Æ, q·µÄ)
    k·¥Æ = index_left(k, LZ)
    Az·¥Æ = Az(i, j, k·¥Æ, grid, LX, LY, LZ)

    k·µÄ = index_right(k, LZ)
    Az·µÄ = Az(i, j, k·µÄ, grid, LX, LY, LZ)

    return Az·µÄ * q·µÄ - Az·¥Æ * q·¥Æ
end

# And flat!

@inline Œ¥x_Ax_q(i, j, k, grid::XFlatGrid, args...) = zero(grid)
@inline Œ¥y_Ay_q(i, j, k, grid::YFlatGrid, args...) = zero(grid)
@inline Œ¥z_Az_q(i, j, k, grid::ZFlatGrid, args...) = zero(grid)
