
struct TKEDissipationVerticalDiffusivity{TD, EQ, MST, CST, FT} <: AbstractScalarDiffusivity{TD, VerticalFormulation, 2}
    tke_dissipation_equations :: EQ
    momentum_stability_function :: MST 
    tracer_stability_function :: CST 
    maximum_tracer_diffusivity :: FT
    maximum_tke_diffusivity :: FT
    maximum_viscosity :: FT
    minimum_turbulent_kinetic_energy :: FT
    minimum_convective_buoyancy_flux :: FT
    negative_turbulent_kinetic_energy_damping_time_scale :: FT
end

function TKEDissipationVerticalDiffusivity{TD}(tke_dissipation_equations::EQ,
                                               momentum_stability_function::MST,
                                               tracer_stability_function::CST,
                                               maximum_tracer_diffusivity::FT,
                                               maximum_tke_diffusivity::FT,
                                               maximum_viscosity::FT,
                                               minimum_turbulent_kinetic_energy::FT,
                                               minimum_convective_buoyancy_flux::FT,
                                               negative_turbulent_kinetic_energy_damping_time_scale::FT) where {TD, EQ, MST, CST, FT}

    return TKEDissipationVerticalDiffusivity{TD, EQ, MST, CST, FT}(tke_dissipation_equations,
                                                                   momentum_stability_function,
                                                                   tracer_stability_function,
                                                                   maximum_tracer_diffusivity,
                                                                   maximum_tke_diffusivity,
                                                                   maximum_viscosity,
                                                                   minimum_turbulent_kinetic_energy,
                                                                   minimum_convective_buoyancy_flux,
                                                                   negative_turbulent_kinetic_energy_damping_time_scale)
end

TKEDissipationVerticalDiffusivity(FT::DataType; kw...) =
    TKEDissipationVerticalDiffusivity(VerticallyImplicitTimeDiscretization(), FT; kw...)

const KEpsilonVD{TD} = TKEDissipationVerticalDiffusivity{TD} where TD
const KEpsilonVDArray{TD} = AbstractArray{<:KEpsilonVD{TD}} where TD
const FlavorOfKEpsilon{TD} = Union{KEpsilonVD{TD}, KEpsilonVDArray{TD}} where TD

"""
    TKEDissipationVerticalDiffusivity(stuff)
                             
Return the `TKEDissipationVerticalDiffusivity` turbulence closure for vertical mixing by
small-scale ocean turbulence based on the prognostic evolution of subgrid
Turbulent Kinetic Energy (TKE, denoted `k`) and dissipation (`ϵ`).
Via the names of its prognostic variables, `TKEDissipationVerticalDiffusivity` is often
called the "k-epsilon" turbulence closure.

!!! note "TKEDissipation vertical diffusivity"
    `TKEDissipationVerticalDiffusivity` is a totally new turbulence closure.
    Use with caution and report any issues with the physics at https://github.com/CliMA/Oceananigans.jl/issues.

Arguments
=========

- `time_discretization`: Either `ExplicitTimeDiscretization()` or `VerticallyImplicitTimeDiscretization()`;
                         default `VerticallyImplicitTimeDiscretization()`.

- `FT`: Float type; default `Float64`.

Keyword arguments
=================

- `maximum_diffusivity`: Maximum value for tracer, momentum, and TKE diffusivity_fields.
                        Used to clip the diffusivity when/if KEpsilon predicts
                        diffusivity_fields that are too large.
                        Default: `Inf`.

- `minimum_turbulent_kinetic_energy`: Minimum value for the turbulent kinetic energy.
                                    Can be used to model the presence "background" TKE
                                    levels due to, for example, mixing by breaking internal waves.
                                    Default: 0.

- `negative_turbulent_kinetic_energy_damping_time_scale`: Damping time-scale for spurious negative values of TKE,
                                                        typically generated by oscillatory errors associated
                                                        with TKE advection.
                                                        Default: 1 minute.

Note that for numerical stability, it is recommended to either have a relative short
`negative_turbulent_kinetic_energy_damping_time_scale` or a reasonable
`minimum_turbulent_kinetic_energy`, or both.
"""
function TKEDissipationVerticalDiffusivity(time_discretization::TD = VerticallyImplicitTimeDiscretization(),
                                           FT = Float64;
                                           tke_dissipation_equations = TKEDissipationEquations(),
                                           maximum_tracer_diffusivity = Inf,
                                           maximum_tke_diffusivity = Inf,
                                           maximum_viscosity = Inf,
                                           minimum_turbulent_kinetic_energy = 1e-6,
                                           minimum_convective_buoyancy_flux = 1e-8,
                                           negative_turbulent_kinetic_energy_damping_time_scale = 1minute) where TD

    tke_dissipation_equations = convert_eltype(FT, tke_dissipation_equations)

    return TKEDissipationVerticalDiffusivity{TD}(tke_dissipation_equations, nothing, nothing,
                                                 FT(maximum_tracer_diffusivity),
                                                 FT(maximum_tke_diffusivity),
                                                 FT(maximum_viscosity),
                                                 FT(minimum_turbulent_kinetic_energy),
                                                 FT(minimum_convective_buoyancy_flux),
                                                 FT(negative_turbulent_kinetic_energy_damping_time_scale))
end

function with_tracers(tracer_names, closure::FlavorOfKEpsilon)
    :k ∈ tracer_names && :ϵ ∈ tracer_names ||
        throw(ArgumentError("Tracers must contain :e to represent turbulent kinetic energy " *
                            "for `TKEDissipationVerticalDiffusivity`."))

    return closure
end

@inline viscosity(::FlavorOfKEpsilon, diffusivity_fields) = diffusivity_fields.κᵘ
@inline diffusivity(::FlavorOfKEpsilon, diffusivity_fields, ::Val{id}) where id = diffusivity_fields._tupled_tracer_diffusivity_fields[id]

#####
##### Show
#####

function Base.summary(closure::KEpsilonVD)
    TD = nameof(typeof(time_discretization(closure)))
    return string("TKEDissipationVerticalDiffusivity{$TD}")
end

function Base.show(io::IO, closure::FlavorOfKEpsilon)
    print(io, summary(closure))
end

