env:
  JULIA_VERSION: "1.10.9"
  JULIA_MINOR_VERSION: "1.10"
  TARTARUS_HOME: "/storage5/buildkite-agent"
  JULIA_DEPOT_PATH: "$TARTARUS_HOME/.julia-$BUILDKITE_BUILD_NUMBER"
  JULIA_PKG_SERVER_REGISTRY_PREFERENCE: eager
  JULIA_NUM_PRECOMPILE_TASKS: 24
  JULIA_NUM_THREADS: 8
  NSYS: "/storage6/simone/new_nsight/bin/nsys"
  CUDA_VISIBLE_DEVICES: "1" # Tartarus device for GPU Benchmarking
  TMPDIR: "$TARTARUS_HOME/tmp"

agents:
  queue: "Oceananigans"

steps:
  - label: "🏕️ initialize tartarus environment"
    key: "init"
    env:
      JULIA_DEPOT_PATH: "$TARTARUS_HOME/.julia-$BUILDKITE_BUILD_NUMBER"
      TEST_GROUP: "init"
      JULIA_BINDIR: "$TARTARUS_HOME/julia-$JULIA_VERSION/bin"
    command: |
      # Download julia binaries
      wget -N -P $TARTARUS_HOME https://julialang-s3.julialang.org/bin/linux/x64/$JULIA_MINOR_VERSION/julia-$JULIA_VERSION-linux-x86_64.tar.gz
      tar xf $TARTARUS_HOME/julia-$JULIA_VERSION-linux-x86_64.tar.gz -C $TARTARUS_HOME
    agents:
      queue: "Oceananigans"
    retry:
      automatic:
        - exit_status: 1
          limit: 1

  - wait

  - label: "{{ matrix.architecture }} - {{ matrix.group }} tests"
    key: "tests"
    agents:
      queue: "Oceananigans"
    command: |

      # Strip emoji for environment variable
      group="{{ matrix.group }}"

      # Instantiate
      $TARTARUS_HOME/julia-$JULIA_VERSION/bin/julia --color=yes --project --check-bounds=no -e 'using Pkg; Pkg.instantiate()'

      # Run Periodic benchmarks
      export BENCHMARK_GROUP="periodic"
      $NSYS profile --output=periodic_output --trace=cuda $TARTARUS_HOME/julia-$JULIA_VERSION/bin/julia --color=yes --project --check-bounds=no test/benchmark_tests.jl
      $NSYS stats periodic_output.nsys-rep > periodic_output.txt

      # Remove generated output files
      rm periodic_output.nsys-rep
      rm periodic_output.sqlite

      # Run Bounded benchmarks
      export BENCHMARK_GROUP="bounded"
      $NSYS profile --output=bounded_output --trace=cuda $TARTARUS_HOME/julia-$JULIA_VERSION/bin/julia --color=yes --project --check-bounds=no test/benchmark_tests.jl
      $NSYS stats bounded_output.nsys-rep > bounded_output.txt

      # Remove generated output files
      rm bounded_output.nsys-rep
      rm bounded_output.sqlite

      # Run Periodic cheap advection benchmarks
      export BENCHMARK_GROUP="periodic_cheap_advection"
      $NSYS profile --output=periodic_cheap_advection_output --trace=cuda $TARTARUS_HOME/julia-$JULIA_VERSION/bin/julia --color=yes --project --check-bounds=no test/benchmark_tests.jl
      $NSYS stats pperiodic_cheap_advection_output.nsys-rep > periodic_cheap_advection_output.txt

      # Remove generated output files
      rm periodic_cheap_advection.nsys-rep
      rm periodic_cheap_advection.sqlite

      # Run Bounded cheap advection benchmarks
      export BENCHMARK_GROUP="bounded_cheap_advection"
      $NSYS profile --output=bounded_cheap_advection_output --trace=cuda $TARTARUS_HOME/julia-$JULIA_VERSION/bin/julia --color=yes --project --check-bounds=no test/benchmark_tests.jl
      $NSYS stats bounded_cheap_advection_output.nsys-rep > bounded_cheap_advection_output.txt

      # Remove generated output files
      rm bounded_cheap_advection_output.nsys-rep
      rm bounded_cheap_advection_output.sqlite

      # Run Immersed benchmarks
      export BENCHMARK_GROUP="immersed"
      $NSYS profile --output=immersed_output --trace=cuda $TARTARUS_HOME/julia-$JULIA_VERSION/bin/julia --color=yes --project --check-bounds=no test/benchmark_tests.jl
      $NSYS stats immersed_output.nsys-rep > immersed_output.txt

      # Remove generated output files
      rm immersed_output.nsys-rep
      rm immersed_output.sqlite

    artifact_paths:
      - "periodic_output.txt"
      - "bounded_output.txt"
      - "periodic_cheap_advection_output.txt"
      - "bounded_cheap_advection_output.txt"
      - "immersed_output.txt"
    matrix:
      setup:
        group:
          - "🚀 benchmark tests"
    soft_fail:
      - exit_status: 3

