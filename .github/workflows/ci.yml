name: CI

on:
  pull_request:
    paths:
      - '.github/workflows/ci.yml'
      - 'ext/**'
      - 'src/**'
      - 'test/**'
      - 'Project.toml'
  push:
    branches:
      - main
    tags: '*'
    paths:
      - '.github/workflows/ci.yml'
      - 'ext/**'
      - 'src/**'
      - 'test/**'
      - 'Project.toml'

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  sharding_tests:
    name: Sharding Tests - Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        version: ['1.10']
        os: [ubuntu-latest]
        arch: [x64]
    steps:
      - run: |
          touch LocalPreferences.toml
          echo "[Reactant]" >> LocalPreferences.toml
          echo "xla_runtime = \"IFRT\"" >> LocalPreferences.toml
          cat LocalPreferences.toml
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v3

      # Force CubedSphere to PR #41 branch (or specific SHA) for PRs and non-main pushes
      - name: Force CubedSphere to PR #41 (branch or SHA)
        if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main') }}
        run: |
          julia --color=yes --project=. -e '
            using Pkg
            println("Active project before activate: ", Base.active_project())
            Pkg.activate(".")
            println("Active project after activate: ", Base.active_project())
            # 1) Remove any prior source mapping (ok if it was not there)
            try Pkg.rm("CubedSphere"); catch e; @info("Pkg.rm(CubedSphere) skipped", e); end
            # 2) Add with explicit name + branch (swap rev for a commit SHA for maximum reproducibility)
            Pkg.add(PackageSpec(
              name="CubedSphere",
              url="https://github.com/CliMA/CubedSphere.jl",
              rev="sb/non-uniform-conformal-mapping",
            ))
            # 3) Resolve + instantiate to lock deps
            Pkg.resolve()
            Pkg.instantiate()
            # 4) Print resolved CubedSphere manifest entry for proof
            deps = Pkg.dependencies()
            cs = first(filter(x -> last(x).name == "CubedSphere", collect(deps)))
            println("\n--- CubedSphere manifest entry ---")
            println(cs)
            println("----------------------------------\n")
            # Also print manifest status
            Pkg.status(; mode=Pkg.PKGMODE_MANIFEST)
          '

      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        env:
          JULIA_DEBUG: "Reactant, Reactant_jll"
          REACTANT_TEST: true
          TEST_GROUP: "sharding"

  mpi_tripolar:
    name: Distributed MPI Tripolar Grid - Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        version: ['1.10']
        os: [ubuntu-latest]
        arch: [x64]
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v3

      - name: Force CubedSphere to PR #41 (branch or SHA)
        if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main') }}
        run: |
          julia --color=yes --project=. -e '
            using Pkg
            println("Active project before activate: ", Base.active_project())
            Pkg.activate(".")
            println("Active project after activate: ", Base.active_project())
            try Pkg.rm("CubedSphere"); catch e; @info("Pkg.rm(CubedSphere) skipped", e); end
            Pkg.add(PackageSpec(
              name="CubedSphere",
              url="https://github.com/CliMA/CubedSphere.jl",
              rev="sb/non-uniform-conformal-mapping",
            ))
            Pkg.resolve()
            Pkg.instantiate()
            deps = Pkg.dependencies()
            cs = first(filter(x -> last(x).name == "CubedSphere", collect(deps)))
            println("\n--- CubedSphere manifest entry ---")
            println(cs)
            println("----------------------------------\n")
            Pkg.status(; mode=Pkg.PKGMODE_MANIFEST)
          '

      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        env:
          TEST_GROUP: "mpi_tripolar"

  turbulent_closures:
    name: Turbulence closures - Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        version: ['1.10']
        os: [ubuntu-latest]
        arch: [x64]
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v3

      - name: Force CubedSphere to PR #41 (branch or SHA)
        if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main') }}
        run: |
          julia --color=yes --project=. -e '
            using Pkg
            println("Active project before activate: ", Base.active_project())
            Pkg.activate(".")
            println("Active project after activate: ", Base.active_project())
            try Pkg.rm("CubedSphere"); catch e; @info("Pkg.rm(CubedSphere) skipped", e); end
            Pkg.add(PackageSpec(
              name="CubedSphere",
              url="https://github.com/CliMA/CubedSphere.jl",
              rev="sb/non-uniform-conformal-mapping",
            ))
            Pkg.resolve()
            Pkg.instantiate()
            deps = Pkg.dependencies()
            cs = first(filter(x -> last(x).name == "CubedSphere", collect(deps)))
            println("\n--- CubedSphere manifest entry ---")
            println(cs)
            println("----------------------------------\n")
            Pkg.status(; mode=Pkg.PKGMODE_MANIFEST)
          '

      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        env:
          TEST_GROUP: "turbulence_closures"

  reactant:
    name: Reactant - Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        version: ['1.10']
        os: [ubuntu-latest]
        arch: [x64]
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v3

      - name: Force CubedSphere to PR #41 (branch or SHA)
        if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main') }}
        run: |
          julia --color=yes --project=. -e '
            using Pkg
            println("Active project before activate: ", Base.active_project())
            Pkg.activate(".")
            println("Active project after activate: ", Base.active_project())
            try Pkg.rm("CubedSphere"); catch e; @info("Pkg.rm(CubedSphere) skipped", e); end
            Pkg.add(PackageSpec(
              name="CubedSphere",
              url="https://github.com/CliMA/CubedSphere.jl",
              rev="sb/non-uniform-conformal-mapping",
            ))
            Pkg.resolve()
            Pkg.instantiate()
            deps = Pkg.dependencies()
            cs = first(filter(x -> last(x).name == "CubedSphere", collect(deps)))
            println("\n--- CubedSphere manifest entry ---")
            println(cs)
            println("----------------------------------\n")
            Pkg.status(; mode=Pkg.PKGMODE_MANIFEST)
          '

      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        env:
          TEST_GROUP: "reactant"

  metal:
    name: Metal - Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        version: ['1.10']
        os: [macos-latest]
        arch: [arm64]
    steps:
      - uses: actions/checkout@v5
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v3

      - name: Force CubedSphere to PR #41 (branch or SHA)
        if: ${{ github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main') }}
        run: |
          julia --color=yes --project=. -e '
            using Pkg
            println("Active project before activate: ", Base.active_project())
            Pkg.activate(".")
            println("Active project after activate: ", Base.active_project())
            try Pkg.rm("CubedSphere"); catch e; @info("Pkg.rm(CubedSphere) skipped", e); end
            Pkg.add(PackageSpec(
              name="CubedSphere",
              url="https://github.com/CliMA/CubedSphere.jl",
              rev="sb/non-uniform-conformal-mapping",
            ))
            Pkg.resolve()
            Pkg.instantiate()
            deps = Pkg.dependencies()
            cs = first(filter(x -> last(x).name == "CubedSphere", collect(deps)))
            println("\n--- CubedSphere manifest entry ---")
            println(cs)
            println("----------------------------------\n")
            Pkg.status(; mode=Pkg.PKGMODE_MANIFEST)
          '

      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        env:
          TEST_GROUP: "metal"
